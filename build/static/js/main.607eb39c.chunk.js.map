{"version":3,"sources":["Plots.js","Table.js","components/ReadOnlyRow.js","index.js","components/EditableRow.js"],"names":["mi","App","points","valuesPlots","colors","plots","i","dataTemp","j","Object","keys","length","x","y","_jsx","LineMarkSeries","color","className","size","data","style","strokeLinejoin","strokeWidth","_jsxs","XYPlot","width","height","display","children","HorizontalGridLines","stroke","VerticalGridLines","XAxis","title","line","ticks","text","fill","YAxis","ReactDOM","render","document","querySelector","Table","model","levelPravil","changeList","changeCoeff","selectedTM","tempus","gettingLevelPravil","select","cartesian","arg","r","args","reduceRight","cont","factor","arr","l","a","slice","Array","prototype","push","bind","t","unshift","cartesian2","undefined","console","log","my","TM","options","name","urovneyObrabotki","id","termsCount","termsNames","term1","term2","term3","coords","x1","y1","x2","y2","x3","y3","x4","y4","plotsColors","pravila_end","1","shapka","termsInputArray","termsInputArray2","tempArray","selectedArray","otarray","doarray","toNode","massivFrom","graph","edges","to","Number","from","otKokogo","doKokogo","termName","eval","map","el","urPravil","temp","temp2","split","ChangeSelect","event","preventDefault","target","getAttribute","row","position","selectedIndex","ChangeCoeff","val","value","urovPravil","prav","index","Fragment","ReadOnlyRow","array","change","urovenPravil","pravila","_ref","rowNumber","rightSide","models","CustomSelect","_ref2","poryadok","onChange","defaultValue","option","start","class","onInput","type","step","min","max","_require","require","XMLParser","inputLevelCounter","input_Name","FlmTree","randomColor","red","Math","floor","random","toString","padStart","green","blue","concat","createNode","esModel","counter","setEsModel","nodes","font","label","shape","physics","group","fl","networks","network","locale","interaction","hover","tooltipDelay","selectable","multiselect","dragView","manipulation","enabled","initiallyActive","addNode","editEdge","addEdge","callback","colorChanges","String","methods","UpdatePravila","setData","addEdgeMode","deleteEdge","splice","deleteNode","toUninstall","willUpdate","newNames","RenderSelectedTM","layout","hierarchical","direction","sortMethod","blockShifting","levelSeparation","_useState","useState","fullName","address","phoneNumber","email","_useState2","_slicedToArray","addFormData","setAddFormData","_useState3","_useState4","editFormData","setEditFormData","_useState5","_useState6","editContactId","setEditContactId","_useState7","_useState8","xmlFiles","setXmlFiles","_useState9","_useState10","xmlModeling","setxmlModeling","_useState11","_useState12","xmlName","setXmlName","_useState13","_useState14","indexBodyHtml","setindexBodyHtml","o2x","window","onbeforeunload","_useState15","_useState16","dataS","_useState17","regimZaprosa","zapros","Name","Author","userRequest","structure","pravilaMode","events","release","getPositions","dragEnd","pos","click","_ref3","doubleClick","_ref4","canvas","pointer","AddTMInputLevel","showPopup","_ref5","changeRegimVivoda","DefZapros","TmNumber","SetZapros","nymberTM","urovenPrav","leftSide","peresobran","rightPeresobran","RenderPravila","ChangeX","zelen","fiolet","obrabotka","krasn","urovniObrabotki","pp","getLevelTMObrabotki","numberKey","key","outCounter","leftArray","cartes","start2","start3","rSide","changeEsName","RenderOptionsMenu","changeEsAuthor","ChangePravila","urovenObrabotki","ChangePlotColor","TermNumber","deletePointplot","deleteNumber","addNewPointPlot","newPointNumber","newCoordsNameX","newCoordsNameY","changeCoordsValue","deleteTerm","newTermName","pop","popup","addNewTerm","changeTermName","newName","ChangeSelectedTMName","_useState18","_useState19","_useState20","indexBodyHtml2","setindexBodyHtml2","_useState21","_useState22","setNetwork","states","uroven","zz","obj","includes","apply","_toConsumableArray","changePravila","coeff","urObr","SendXmlModelling","tempXML","pravilaDict1","pravilaDict","tempStructure","file","Blob","FormData","append","JSON","stringify","axios","post","then","res","str","p","RenderModelingMenu","output","item","SaveToXMLOnComputer","element","createElement","body","appendChild","href","URL","createObjectURL","download","Pravila","okolo","ConsoleXml","xmlStr","sendToServer","File","XmlOnServer","encodedData","decode","Buffer","jObj","parse","match","ChangeColor","DeletePointPlot","changeCoordsValues","AddNewTerm","DeleteTerm","indexB","ChangeZapros","ChangeRegimZaprosa","ChangeZaprosInput","nameTM","number","values","placeholder","onClick","changeSelectedTMName","tm","points4Plots","pravilaButton","nm","stringLabel","stringNameTerm","xName","yName","GoToPravila","testINFO","findIndex","handleSubmit","reader","FileReader","parser","readAsText","onload","_event","content","result","pravila_temp","handleFileSelect","files","inp_termMn_1","marginLeft","Graph","getNetwork","right","border","getElementById"],"mappings":"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","file":"static/js/main.607eb39c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"react-vis/dist/style.css\";\r\n\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  LineMarkSeries,\r\n  DiscreteColorLegend\r\n} from \"react-vis\";\r\n\r\nlet mi=0\r\n//<DiscreteColorLegend  orientation=\"horizontal\" items = {series}    />\r\nlet series= [{\r\n  title: \"Apples\",\r\n  color : \"#000000\",\r\n},\r\n{title: \"Orange\",\r\ndisabled: false,\r\ndata: [{ x: 0, y: 12 }, { x: 1, y: 22 }],\r\ncolor : \"#FF6c0A\",\r\n},\r\n\r\n]\r\n\r\nfunction getRandomColor() {\r\nvar letters = '0123456789ABCDEF';\r\nvar color = '#';\r\nfor (var i = 0; i < 6; i++)\r\n{\r\n  color += letters[Math.floor(Math.random() * 16)];\r\n}\r\nreturn color;\r\n}\r\nexport default function App(points, valuesPlots, colors) {\r\n  if(valuesPlots > 0)\r\n  {\r\n    mi = valuesPlots\r\n  }\r\n  let x1_1,x2_1,x3_1,y1_1,y2_1,y3_1\r\n  let x4_1 = 1\r\n  let y4_1 = 0\r\n  let x1_2,x2_2,x3_2,x4_2,y1_2,y2_2,y3_2,y4_2\r\n  let x1_3,x2_3,x3_3,x4_3,y1_3,y2_3,y3_3,y4_3\r\n  let x1_4,x2_4,x3_4,x4_4,y1_4,y2_4,y3_4,y4_4\r\n\r\n\r\n\r\n  let x1_5,x2_5,x3_5,x4_5,y1_5,y2_5,y3_5,y4_5\r\n  let x1_6,x2_6,x3_6,x4_6,y1_6,y2_6,y3_6,y4_6\r\n  let x1_7,x2_7,x3_7,x4_7,y1_7,y2_7,y3_7,y4_7\r\n  let x1_8,x2_8,x3_8,x4_8,y1_8,y2_8,y3_8,y4_8\r\n  let x1_9,x2_9,x3_9,x4_9,y1_9,y2_9,y3_9,y4_9\r\n  let x1_10,x2_10,x3_10,x4_10,y1_10,y2_10,y3_10,y4_10\r\n  const lines = [{x:5,y:2},{x:6,y:2}]\r\n\r\n\r\n  let color = []\r\n  let items = {title: \"hello\", color : \"#D1D0CE\"}\r\n/*\r\n  //заполнить все переменные для всех графиков значениями координат\r\n  for (let i = 0; i < mi; i++)\r\n  {\r\n    if(typeof points[i] == 'object' )\r\n    {\r\n      let b = points[i]\r\n      eval(\"x1_\"+(i+1) + \"=\" +b[0]) \r\n      eval(\"y1_\"+(i+1) + \"=\" +b[1]) \r\n      eval(\"x2_\"+(i+1) + \"=\" +b[2]) \r\n      eval(\"y2_\"+(i+1) + \"=\" +b[3]) \r\n      eval(\"x3_\"+(i+1) + \"=\" +b[4]) \r\n      eval(\"y3_\"+(i+1) + \"=\" +b[5]) \r\n      eval(\"x4_\"+(i+1) + \"=\" +b[6]) \r\n      eval(\"y4_\"+(i+1) + \"=\" +b[7])  \r\n      color[i] = getRandomColor();\r\n    }\r\n  }\r\n*/\r\n let plots = []\r\nfor (let i = 0; i < mi; i++)\r\n  {\r\n    if(typeof points[i] == 'object' )\r\n    {\r\n      let dataTemp = [{}]\r\n      for(let j = 0; j <Object.keys(points[i]).length/2; j++)\r\n      {dataTemp[j]=({x: points[i][\"x\"+(j+1)],y: points[i][\"y\"+(j+1)] })\r\n\r\n      }\r\n \r\n  plots[i]=[<LineMarkSeries\r\n  color =  {colors[i]}\r\n  className=\"1-series\"\r\n  size='3.5'\r\n  \r\n\r\n\r\n  data={dataTemp}\r\n  style={{\r\n    strokeLinejoin: \"round\",\r\n    strokeWidth: 2\r\n  }}\r\n/>\r\n]\r\n   } }\r\n  return (    \r\n    <XYPlot width={700} height={200} display = \"inline-block\">\r\n      <HorizontalGridLines style={{ stroke: \"#D1D0CE\" }} />\r\n      <VerticalGridLines style={{ stroke: \"#D1D0CE\" }} />\r\n      <XAxis\r\n        title=\"x\"\r\n        style={{\r\n          line: { stroke: \"#111111\" },\r\n          ticks: { stroke: \"#6b6b76\" },\r\n          text: { stroke: \"none\", fill: \"#6b6b76\" }\r\n        }}\r\n      />\r\n       <YAxis\r\n        title=\"Коэфф. уверенности\"\r\n        style={{\r\n          line: { stroke: \"#6b6b76\" },\r\n          ticks: { stroke: \"#6b6b76\" },\r\n          text: { stroke: \"none\", fill: \"#6b6b76\"}\r\n        }}\r\n      />\r\n      \r\n  {plots}\r\n\r\n      \r\n\r\n  \r\n    </XYPlot>\r\n  );\r\n  \r\n}\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));","import React, { useState, Fragment } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./Table.css\";\r\nimport data from \"./mock-data.json\";\r\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\r\nimport EditableRow from \"./components/EditableRow\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { mkdirSync } from \"fs\";\r\n\r\n\r\nexport  default function Table(model, levelPravil, changeList, changeCoeff,selectedTM) {\r\n\r\n  let tempus=[[]]\r\n  let gettingLevelPravil = levelPravil\r\n \r\n  let select = selectedTM\r\n  if (select == undefined)\r\n  select = 1\r\n \r\n\r\n  console.log(select)\r\n  if(typeof(gettingLevelPravil) != \"string\")\r\n  {\r\n    gettingLevelPravil =1 \r\n  \r\n  }\r\n  function cartesian(arg) {\r\n    var r = [], args = arg;\r\n    args.reduceRight(function(cont, factor, i) {\r\n        return function(arr) {\r\n            for (var j=0, l=factor.length; j<l; j++) {\r\n                var a = arr.slice(); // clone arr\r\n                a[i] = factor[j];\r\n                cont(a);\r\n            }\r\n        };\r\n    }, Array.prototype.push.bind(r))(new Array(args.length));\r\nlet t = r.length\r\n\r\n\r\n   for(let i = 0; i < t; i++)\r\n    {\r\n      r[i].unshift(i+1)\r\n    }\r\n   \r\n    return r;\r\n}\r\nfunction cartesian2(arg) {\r\n  var r = [], args = arg;\r\n  args.reduceRight(function(cont, factor, i) {\r\n      return function(arr) {\r\n          for (var j=0, l=factor.length; j<l; j++) {\r\n              var a = arr.slice(); // clone arr\r\n              a[i] = factor[j];\r\n              cont(a);\r\n          }\r\n      };\r\n  }, Array.prototype.push.bind(r))(new Array(args.length));\r\nlet t = r.length\r\n\r\n\r\n \r\n  return r;\r\n}\r\n\r\n//посмотреть терм-множ. у входного \r\n//посмотреть терм-множ. у обработки-1\r\n//это будет названия столбцов \r\n//console.log(model.termMnogestvaInputLevel[0])\r\n\r\n\r\n\r\nlet my = model\r\n\r\n\r\n//if(model == null)\r\nif(my.TM == undefined)\r\nmy = {  \r\n  options: {\r\n    name: \"Экспертная система 1\",\r\n    urovneyObrabotki: 3,\r\n\r\n  },\r\n  TM: \r\n  [\r\n    //объект первого терм множества входа\r\n    {\r\n        id: '1',\r\n        name: 'Тип постройки',\r\n        termsCount:3,\r\n        termsNames: {term1: 'Общ. здание', term2: 'Жилое здание', term3:'С/Х',},\r\n        coords:[{x1:0, y1:0, x2:1, y2:1, x3:1, y3:5},\r\n                {x1:2, y1:0, x2:3, y2:1, x3:3, y3:5 },\r\n                {x1:4, y1:0, x2:5, y2:2, x3:6, y3:2, x4:7, y4:0 } ,       \r\n              ],    \r\n              plotsColors:['#000000','#000000','#FF00D0',] ,     \r\n\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Материал',\r\n      termsCount:3,\r\n      termsNames: {term1: 'Дерево', term2: 'Бетон', term3:'Кирпич',},\r\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\r\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\r\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \r\n            ],    \r\n            plotsColors:['#00FF00','#E30202','#FF00D0',] ,     \r\n\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Климат',\r\n      termsCount:3,\r\n      termsNames: {term1: 'Холодный', term2: 'Прохладный', term3:'Теплый',},\r\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\r\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\r\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \r\n            ],    \r\n            plotsColors:['#00FF00','#E30202','#FF00D0',] ,     \r\n\r\n    },\r\n  ]  ,\r\n  pravila_end: \r\n  {1:['1_1...1_1',\r\n  '1_2...2_0.8',\r\n  '1_3...1_0.9',\r\n\r\n  '2_1...2_0.7',\r\n  '2_2...1_0.9',\r\n  '2_3...2_1',\r\n\r\n  '3_1...1_0.9',\r\n  '3_2...1_0.8',\r\n  '3_3...2_0.9',\r\n  \r\n\r\n\r\n  ], }}\r\n \r\n  const shapka= [];\r\n  let termsInputArray=[[]]\r\n  let termsInputArray2=[[]]\r\n  let tempArray=[]\r\n  let selectedArray=[]\r\n  let otarray=[]\r\n  let doarray=[]\r\n  otarray.push(my.TM[0])\r\n  otarray.push(my.TM[1])\r\n  doarray.push(my.TM[2])\r\n\r\nif(model.TM!=undefined)\r\n{\r\n  otarray = []\r\n  doarray=[]\r\n  console.log(selectedTM)\r\n  let toNode = selectedTM\r\n\r\n  \r\n  let massivFrom =[]\r\n  //создаем массив otKokogo\r\n  for(let i = 0; i < my.graph.edges.length; i ++)\r\n        {\r\n          if(my.graph.edges[i].to == Number(toNode))\r\n          {\r\n            massivFrom.push(my.graph.edges[i].from )\r\n          }\r\n        }\r\n  \r\n        for(let i = 0; i <massivFrom.length; i ++)\r\n        {for(let j = 0; j <my.TM.length; j ++)\r\n          {\r\n            if(my.TM[j].id == Number(massivFrom[i]-1))\r\n          {\r\n            otarray.push(my.TM[j])\r\n          }\r\n  \r\n          }\r\n  \r\n        }      \r\n        \r\n\r\n        for(let i = 0; i < my.TM.length; i ++)\r\n        {\r\n          if(my.TM[i].id == Number(toNode-1))\r\n          { \r\n            doarray.push(my.TM[i])\r\n          }\r\n        }\r\n        console.log(doarray)\r\n}\r\n  \r\n\r\n\r\n  //делаем массив всех термов из терммножества входа\r\n  \r\n  \r\n \r\n  let otKokogo = otarray//eval(\"my.TM\")// dfdf\r\n  let doKokogo = doarray//eval(\"my.termMnogestvaOutputLevel\") \r\n  console.log(otKokogo)\r\n  shapka.push(<th>№</th>)\r\n  for(let i = 0; i < otKokogo.length; i++)\r\n  {\r\n   let  name = otKokogo[i].name\r\nshapka.push(<th>{otKokogo[i].name}</th>)\r\n\r\n  }\r\n\r\n  for(let i = 0; i < doKokogo.length; i++)\r\n  {\r\n   let  name = doKokogo[i].name\r\nshapka.push(<th>{doKokogo[i].name}</th>)\r\n\r\n  }\r\n\r\n \r\n  for(let i = 0; i < otKokogo.length; i++)\r\n{    \r\n \r\n  for(let j = 0; j < otKokogo[i].termsCount; j++)\r\n  {     \r\n    console.log(otKokogo[0].termsNames['term1'])   \r\n        console.log(i )//+ \"   \" + eval(\"otKokogo[i].termsNames['term\"+(j+1)+\"']\") )\r\n        console.log(j+1 )\r\n    let termName = eval(\"otKokogo[\" +i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n    tempArray[j] = termName       \r\n  } \r\n    termsInputArray2[i]=(tempArray)    \r\n    tempArray = []  \r\n}\r\n\r\ntermsInputArray2 =cartesian2(termsInputArray2)\r\n\r\ntermsInputArray2.map((el)=> (el.push(\"...\")))\r\n\r\n  for(let i = 0; i < doKokogo.length; i++)\r\n  {    termsInputArray2.map((el)=> (\r\n\r\n    el.push(1)\r\n    \r\n    ))\r\n\r\n    for(let j = 0; j <doKokogo[i].termsCount; j++)\r\n    {     \r\n      let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n      tempArray[j] = {id: (j+1), name :termName}     \r\n\r\n    } \r\n    selectedArray[i]=(tempArray)    \r\n      tempArray = []  \r\n  }\r\n \r\n\r\nfor(let i = 0; i < doKokogo.length; i++)\r\n{    let tempArray=[]\r\n  for(let j = 0; j < doKokogo[i].termsCount; j++)\r\n  {     \r\n    let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n    tempArray[j] = {id: (j+1), name :termName}     \r\n\r\n  } \r\n  selectedArray[i]=(tempArray)    \r\n    tempArray = []  \r\n}\r\nconsole.log(selectedTM)\r\nlet urPravil = eval(\"my.pravila_end[\" +selectedTM+\"]\") \r\nif(urPravil!= undefined)\r\n  {\r\n    \r\n    \r\n    for(let i =0; i<urPravil.length;i++)\r\n    {\r\n      let temp \r\n      let temp2 =[]\r\n      for(let j=0; j< urPravil[i].split(\"...\")[0].split(\"_\").length+1; j++)    \r\n    {\r\n      let termName\r\n        if(j==0)\r\ntermName = i+1\r\n        else{ temp= urPravil[i].split(\"...\")[0].split(\"_\")[j-1]\r\n         termName = eval(\"otKokogo[\"+(j-1)+\"].termsNames['term\"+(temp)+\"']\") \r\n       \r\n  }\r\n  temp2[j] = termName\r\n\r\n    }\r\n\r\n  tempus[i] = temp2\r\n  \r\n    \r\n\r\n   \r\n  \r\n  \r\n\r\n  }}\r\n\r\n\r\n\r\n  const ChangeSelect = (event) => {\r\n    event.preventDefault();\r\n\r\n    const fieldName = event.target.getAttribute(\"name\");\r\n   let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\r\n let row = event.target.id.split(\"__\")[0].split(\"_\")[1]\r\n let position = event.target.id.split(\"__\")[1]\r\n position = position.split(\"/\")[0]\r\nchangeList(row, position,event.target.options[event.target.selectedIndex].id, select)\r\n\r\nfor(let i = 0; i<termsInputArray2[row-1].length; i++ )\r\n{\r\n\r\nif(termsInputArray2[position-1][i] == \"...\")\r\n{\r\n  termsInputArray2[position-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\r\n  break\r\n\r\n}}};\r\n\r\nconst ChangeCoeff= (event) => {\r\n  event.preventDefault();\r\n\r\nlet val = event.target.value\r\n\r\n // const fieldName = event.target.getAttribute(\"name\");\r\n let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\r\nlet row = event.target.id.split(\"__\")[0].split(\"_\")[1]\r\nlet position = event.target.id.split(\"__\")[1]\r\nlet urovPravil =  select//event.target.id.split(\"__\")[0].split(\"_\")[0]\r\nposition = position.split(\"/\")[0]\r\nchangeCoeff(row, position,val,urovPravil)\r\nconsole.log(\"row=\"+row)\r\nconsole.log(\"position=\"+position)\r\nconsole.log(\"urovPravil=\"+urovPravil)\r\n\r\n\r\n/*\r\nfor(let i = 0; i<termsInputArray2[location-1].length; i++ )\r\n{\r\n\r\nif(termsInputArray2[location-1][i] == \"...\")\r\n{\r\ntermsInputArray2[location-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\r\nbreak\r\n\r\n}}*/\r\n};\r\nlet prav\r\n\r\nprav = eval(\"my.pravila_end\")\r\nconsole.log(prav)\r\n\r\n\r\n  //console.log(termsInputArray)\r\n\r\n //console.log(cartesian(i1)) \r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <form >\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n                {shapka}\r\n              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/*contacts.map((contact) => (\r\n              <Fragment>\r\n                { <ReadOnlyRow\r\n                    contact={contact}\r\n                    handleEditClick={handleEditClick}\r\n                    handleDeleteClick={handleDeleteClick}\r\n                  />}\r\n              </Fragment>\r\n            ))*/}\r\n            {\r\n                      tempus.map((stroke,index) => (\r\n                        <Fragment>\r\n                          { <ReadOnlyRow\r\n                              stroke={stroke}\r\n                               array= {selectedArray}\r\n                               change = {ChangeSelect}\r\n                               urovenPravil = {levelPravil}\r\n                               index = {index+1}\r\n                               pravila = {prav[Number(select)][index]}   \r\n                               changeCoeff = {ChangeCoeff}                            \r\n                            />}\r\n                        </Fragment>\r\n                        \r\n                      ))\r\n\r\n\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n\r\n   \r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nReactDOM.render(<Table />, document.querySelector(\"#root\"));\r\n","import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ stroke,  array,change, urovenPravil, index, pravila, changeCoeff }) => {\r\n \r\n  let rowNumber = index\r\nlet rightSide = pravila.split(\"...\")[1].split(\"-\")\r\n\r\nif(rightSide == null)\r\nrightSide= \"1_1-1_1\"\r\n\r\n/* \r\n  <td>{stroke[0]}</td>\r\n      <td>{stroke[1]}</td>\r\n      <td>{stroke[2]}</td>\r\n      <td>{stroke[3]}</td>\r\n      <td>1\r\n       {/* <button\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n        </td>\r\n        <td>1</td>\r\n*/\r\n\r\nlet models= [\r\n  {\r\n      id: 1,\r\n      name: '',\r\n  },\r\n\r\n]\r\nif(typeof(stroke[1]) == \"string\" &&array.length >0)\r\nfor(let i =0;i < array[0].length; i++)\r\n{\r\nmodels[i] = {id:(i+1),\r\nname:array[0][i]\r\n}\r\n\r\n}\r\n\r\n    // при выборе нового значения в категории\r\n    const onCategoriesSelectChange = (e) => {\r\n\r\n      // преобразуем выбранное значение опции списка в число - идентификатор категории\r\n      const categoryId = parseInt(e.target.options[e.target.selectedIndex].value);\r\n  \r\n      console.log(e.target.options[e.target.selectedIndex].label)\r\n  }\r\n\r\n\r\n\r\n\r\n// компонент пользовательского выпадающего списка\r\nconst CustomSelect = ({ id, options, onChange, poryadok }) => {\r\n  let b\r\n  return (\r\n      <select className=\"custom-select\" id={id} onChange={change} defaultValue={options[rightSide[poryadok].split(\"_\")[0]-1].name}>\r\n          { options.map((option, index) =>\r\n             <option key={id + index} id={option.id} value = {option.name}>{option.name}</option>\r\n          ) }\r\n\r\n      </select>\r\n  )\r\n}\r\n  let arr = []\r\n  let start = true\r\n  for (let i = 0; i < stroke.length; i ++)\r\n  {\r\nif(start && typeof(stroke[i])=='string')\r\n{arr[0] =<td>{stroke[i]}</td>\r\n\r\n\r\n}\r\n\r\n   else {\r\n    arr.push(<td>{stroke[i]}</td>)\r\n   }\r\n   \r\n   \r\nstart = false\r\n\r\n  }\r\n  if(typeof(stroke[1]) == \"string\" &&array.length >0)\r\n  for(let i =0; i <array.length; i++)\r\n  {\r\n    let temp = urovenPravil+\"_\"+rowNumber+\"_\"+\"_\"+(i+1)+\"/\" +array.length\r\n    arr.push(<td><CustomSelect id={temp} options={array[i]}  poryadok ={i}/>\r\n    <input  class = \"plotInput\" onInput={changeCoeff}  type='number' step=\"0.1\" min='0' max='1'  id = {temp} name=\"d\"  value={rightSide[i].split(\"_\")[1]} />\r\n    </td>)\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      {arr}\r\n    \r\n    </tr>\r\n  );\r\n};\r\n//  } \r\nexport default ReadOnlyRow;\r\n","import Graph from 'react-graph-vis'\r\nimport React, { useState, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './Plots.js'\r\nimport Table from './Table.js'\r\nimport 'react-vis/dist/style.css'\r\nimport axios from 'axios'\r\nconst { XMLParser } = require('fast-xml-parser')\r\n\r\nlet inputLevelCounter = 0\r\nlet input_Name\r\n\r\nfunction FlmTree() {\r\n    function randomColor() {\r\n        const red = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        const green = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        const blue = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        return `#${red}${green}${blue}`\r\n    }\r\n    const createNode = (x, y) => {\r\n        const color = randomColor()\r\n\r\n        esModel.counter++\r\n        setEsModel(esModel)\r\n        esModel.graph.nodes.push({\r\n            x: x,\r\n            y: y,\r\n            color: '#F5DEB3',\r\n            id: esModel.counter,\r\n            font: { size: 10 },\r\n            size: 30,\r\n            label: '',\r\n            title: '',\r\n            shape: 'dot',\r\n            physics: 'false',\r\n            group: 3,\r\n        })\r\n    }\r\n    function fl() {\r\n        console.log(networks.network)\r\n    }\r\n    const options = {\r\n        locale: 'ru',\r\n        interaction: {\r\n            hover: true,\r\n            tooltipDelay: 10,\r\n            selectable: true,\r\n            multiselect: true,\r\n            dragView: true,\r\n        },\r\n        manipulation: {\r\n            enabled: true,\r\n            initiallyActive: true,\r\n            addNode: false,\r\n            editEdge: false,\r\n            addEdge: function (data, callback) {\r\n                esModel.graph.edges.push(data)\r\n                callback(data)\r\n                let colorChanges = {}\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                esModel.pravila_end = []\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    console.log(esModel.graph.nodes[i].color)\r\n                    if (\r\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                networks.network.addEdgeMode()\r\n            },\r\n            deleteEdge: function (data, callback) {\r\n                callback(data)\r\n\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (esModel.graph.edges[i].id == data.edges[0]) {\r\n                        esModel.graph.edges.splice(i, 1)\r\n                        break\r\n                    }\r\n                }\r\n\r\n                let colorChanges = {}\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                esModel.pravila_end = []\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#F5DEB3'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n            deleteNode: function (data, callback) {\r\n                callback(data)\r\n                let toUninstall = []\r\n\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (\r\n                        esModel.graph.edges[i].from == data.nodes[0] ||\r\n                        esModel.graph.edges[i].to == data.nodes[0]\r\n                    ) {\r\n                        toUninstall.push(i)\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < toUninstall.length; i++) {\r\n                    esModel.graph.edges.splice(\r\n                        toUninstall[toUninstall.length - 1 - i],\r\n                        1\r\n                    )\r\n                }\r\n                console.log(esModel.graph.edges)\r\n                // esModel.graph.edges.splice(i, 1);\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].id == data.nodes[0]) {\r\n                        esModel.graph.nodes.splice(i, 1)\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    if (esModel.TM[i].id == data.nodes[0] - 1) {\r\n                        esModel.TM.splice(i, 1)\r\n                    }\r\n                }\r\n                esModel.counter--\r\n\r\n                let newNames = [{}]\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    newNames[esModel.graph.nodes[i].id] = i + 1\r\n                    esModel.graph.nodes[i].id = i + 1\r\n                }\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    esModel.TM[i].id = i\r\n                }\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    esModel.graph.edges[i].from =\r\n                        newNames[esModel.graph.edges[i].from]\r\n                    esModel.graph.edges[i].to =\r\n                        newNames[esModel.graph.edges[i].to]\r\n                }\r\n                let colorChanges = {}\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#F5DEB3'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(0)\r\n            },\r\n        },\r\n        layout: {\r\n            hierarchical: {\r\n                enabled: false,\r\n                direction: 'LR',\r\n                sortMethod: 'directed',\r\n                blockShifting: false,\r\n                levelSeparation: 180,\r\n            },\r\n        },\r\n        edges: {\r\n            color: '#000000',\r\n        },\r\n    }\r\n\r\n    //const [contacts, setContacts] = useState(data);\r\n    const [addFormData, setAddFormData] = useState({\r\n        fullName: '',\r\n        address: '',\r\n        phoneNumber: '',\r\n        email: '',\r\n    })\r\n\r\n    const [editFormData, setEditFormData] = useState({\r\n        fullName: '',\r\n        address: '',\r\n        phoneNumber: '',\r\n        email: '',\r\n    })\r\n    const [editContactId, setEditContactId] = useState(null)\r\n    const [xmlFiles, setXmlFiles] = useState([])\r\n    const [xmlModeling, setxmlModeling] = useState([])\r\n    const [xmlName, setXmlName] = useState([])\r\n    const [indexBodyHtml, setindexBodyHtml] = useState([])\r\n\r\n    var o2x = require('object-to-xml')\r\n    window.onbeforeunload = function () {\r\n        return 'A XHR request is pending, are you sure you want to leave ?'\r\n    }\r\n    const [dataS, setData] = useState()\r\n    /*\r\n  useEffect(() => {\r\n    fetch('/api')\r\n    .then(response => response.json()\r\n    .then(response => setData(response.message)))\r\n  } )*/\r\n    const [esModel, setEsModel] = useState({\r\n        regimZaprosa: 1,\r\n        zapros: {},\r\n        options: {\r\n            Name: '',\r\n            Author: '',\r\n            userRequest: [],\r\n        },\r\n        structure: {},\r\n        pravilaMode: 0,\r\n        TM: [],\r\n        pravila_end: {\r\n            1: [\r\n                '1_1...1_1',\r\n                '1_2...2_0.8',\r\n                '1_3...1_0.9',\r\n                '2_1...2_0.7',\r\n                '2_2...1_0.9',\r\n                '2_3...2_1',\r\n                '3_1...1_0.9',\r\n                '3_2...1_0.8',\r\n                '3_3...2_0.9',\r\n            ],\r\n        },\r\n        counter: 0,\r\n        graph: {\r\n            nodes: [],\r\n            edges: [],\r\n        },\r\n        events: {\r\n            release: ({ nodes, edges }) => {\r\n                let pos = networks.network.getPositions()\r\n            },\r\n            dragEnd: ({ nodes, edges }) => {\r\n                let pos = networks.network.getPositions()\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\r\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n            click: ({ nodes, edges }) => {\r\n                if (nodes[0] != null) {\r\n                    RenderSelectedTM(nodes[0] - 1)\r\n                }\r\n            },\r\n\r\n            doubleClick: ({ pointer: { canvas } }) => {\r\n                let pos = networks.network.getPositions()\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\r\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\r\n                }\r\n                esModel.methods.AddTMInputLevel(esModel.graph.nodes.length)\r\n                createNode(canvas.x, canvas.y)\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(esModel.graph.nodes.length - 1)\r\n            },\r\n            showPopup: ({ nodes, edges }) => {},\r\n        },\r\n        methods: {\r\n            changeRegimVivoda: (value) => {\r\n                esModel.regimZaprosa = value\r\n                setEsModel(esModel)\r\n                console.log(value)\r\n            },\r\n\r\n            DefZapros: (TmNumber) => {\r\n                esModel.zapros[String(TmNumber)] = '1'\r\n                setEsModel(esModel)\r\n            },\r\n            SetZapros: (TmNumber, value) => {\r\n                esModel.zapros[String(TmNumber)] = value\r\n                setEsModel(esModel)\r\n                console.log(esModel.zapros)\r\n                //RenderModelingMenu()\r\n            },\r\n            ChangeCoeff: (row, pos, value, nymberTM) => {\r\n                let urovenPrav\r\n                urovenPrav = eval(\r\n                    'esModel.pravila_end[' + Number(nymberTM) + ']'\r\n                )\r\n                let leftSide = urovenPrav[row - 1].split('...')[0]\r\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\r\n                rightSide[pos - 1] =\r\n                    '' + rightSide[pos - 1].split('_')[0] + '_' + value\r\n                let peresobran = '' + leftSide + '...'\r\n                let rightPeresobran = ''\r\n                for (let i = 0; i < rightSide.length; i++) {\r\n                    rightPeresobran = rightPeresobran + rightSide[i]\r\n                    if (i + 1 < rightSide.length) {\r\n                        rightPeresobran = '' + rightPeresobran + '-'\r\n                    }\r\n                }\r\n                peresobran = '' + peresobran + '' + rightPeresobran\r\n                urovenPrav[row - 1] = peresobran\r\n                setEsModel(esModel)\r\n                RenderPravila(Number(nymberTM))\r\n            },\r\n            ChangeX: (events) => {\r\n                let zelen = []\r\n                let fiolet = []\r\n                let obr1 = []\r\n                let obrabotka = {}\r\n                let krasn = []\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].color == '#008000') {\r\n                        esModel.graph.nodes[i].y = 0\r\n                        zelen[zelen.length] = i + 1\r\n                        esModel.graph.nodes[i].x = -300 + zelen.length * 150\r\n                    }\r\n                    if (esModel.graph.nodes[i].color == '#DA70D6') {\r\n                        esModel.graph.nodes[i].y = -250\r\n                        fiolet[fiolet.length] = i + 1\r\n                    }\r\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\r\n                        esModel.graph.nodes[i].y = -500\r\n                        krasn[krasn.length] = i + 1\r\n                    }\r\n                }\r\n                obrabotka['input'] = zelen\r\n                obrabotka['output'] = krasn\r\n                let spisok = {}\r\n                urovniObrabotki = {}\r\n                for (let i = 0; i < fiolet.length; i++) {\r\n                    pp = []\r\n                    getLevelTMObrabotki(fiolet[i], zelen)\r\n                }\r\n                console.log(urovniObrabotki)\r\n                let numberKey = 50\r\n                for (var key in urovniObrabotki) {\r\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\r\n                    numberKey++\r\n                    delete urovniObrabotki[key]\r\n                }\r\n                numberKey = 1\r\n                for (var key in urovniObrabotki) {\r\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\r\n                    numberKey++\r\n                    delete urovniObrabotki[key]\r\n                }\r\n\r\n                for (var key in urovniObrabotki) {\r\n                    for (let i = 0; i < urovniObrabotki[key].length; i++) {\r\n                        for (let y = 0; y < esModel.graph.nodes.length; y++) {\r\n                            if (\r\n                                esModel.graph.nodes[y].id ==\r\n                                urovniObrabotki[key][i]\r\n                            ) {\r\n                                esModel.graph.nodes[y].y = -100 * Number(key)\r\n                                esModel.graph.nodes[y].x = -225 + 150 * (i + 1)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                let outCounter = 0\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\r\n                        esModel.graph.nodes[i].y =\r\n                            Object.keys(urovniObrabotki).length * -100 - 100\r\n                        esModel.graph.nodes[i].x = -150 + 150 * (outCounter + 1)\r\n                        outCounter++\r\n                    }\r\n                }\r\n                outCounter = 0\r\n                urovniObrabotki['input'] = zelen\r\n                urovniObrabotki['output'] = krasn\r\n                console.log(urovniObrabotki)\r\n                esModel.structure = urovniObrabotki\r\n\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(0)\r\n            },\r\n            UpdatePravila: (events) => {\r\n                let toNode\r\n                if (events.target != undefined)\r\n                    toNode = Number(events.target.id) + 1\r\n                else toNode = events\r\n                esModel.pravilaMode = 1\r\n\r\n                let otKokogo = []\r\n                let massivFrom = []\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (\r\n                        esModel.graph.edges[esModel.graph.edges.length - i - 1]\r\n                            .to == Number(toNode)\r\n                    ) {\r\n                        massivFrom.push(\r\n                            esModel.graph.edges[\r\n                                esModel.graph.edges.length - i - 1\r\n                            ].from\r\n                        )\r\n                    }\r\n                }\r\n                for (let i = 0; i < massivFrom.length; i++) {\r\n                    for (let j = 0; j < esModel.TM.length; j++) {\r\n                        if (\r\n                            esModel.TM[esModel.TM.length - j - 1].id ==\r\n                            Number(massivFrom[i] - 1)\r\n                        ) {\r\n                            otKokogo.push(esModel.TM[esModel.TM.length - j - 1])\r\n                        }\r\n                    }\r\n                }\r\n                if (otKokogo <= 0) return\r\n\r\n                let leftArray = []\r\n                for (let i = 0; i < otKokogo.length; i++) {\r\n                    leftArray.push([])\r\n                    for (\r\n                        let j = 0;\r\n                        j < otKokogo[otKokogo.length - 1 - i].termsCount;\r\n                        j++\r\n                    ) {\r\n                        leftArray[i][j] = String(j + 1)\r\n                    }\r\n                }\r\n\r\n                let arr = []\r\n                let cartes = cartesian(leftArray)\r\n                let start2 = false\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    if (!start2) arr.push([])\r\n                    arr[i] = ''\r\n                    for (let j = 0; j < cartes[i].length; j++) {\r\n                        arr[i] += cartes[i][j]\r\n                        if (j + 1 < cartes[i].length) arr[i] += '_'\r\n                        else arr[i] += '...'\r\n                    }\r\n                    start2 = true\r\n                }\r\n                let doKokogo = []\r\n\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    if (esModel.TM[i].id == Number(toNode - 1)) {\r\n                        doKokogo.push(esModel.TM[i])\r\n                    }\r\n                }\r\n\r\n                let start3 = false\r\n                let rSide = []\r\n\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    if (!start3) leftArray.push([])\r\n                    rSide[i] = ''\r\n                    for (let j = 0; j < doKokogo.length; j++) {\r\n                        rSide[i] += '1_1'\r\n                        if (j + 1 < doKokogo.length) rSide[i] += '-'\r\n                    }\r\n                    start3 = true\r\n                }\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    arr[i] += rSide[i]\r\n                }\r\n                esModel.pravila_end[String(toNode)] = arr\r\n                setEsModel(esModel)\r\n            },\r\n            changeEsName: (value) => {\r\n                esModel.options.Name = String(value.target.value)\r\n                setEsModel(esModel)\r\n                RenderOptionsMenu()\r\n            },\r\n            changeEsAuthor: (value) => {\r\n                esModel.options.Author = String(value)\r\n                esModel.options.Author = String(value.target.value)\r\n                setEsModel(esModel)\r\n                RenderOptionsMenu()\r\n            },\r\n            ChangePravila: (row, pos, value, urovenObrabotki) => {\r\n                let urovenPrav\r\n                urovenPrav = esModel.pravila_end[urovenObrabotki]\r\n                let leftSide = urovenPrav[row - 1].split('...')[0]\r\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\r\n                rightSide[pos - 1] =\r\n                    '' + value + '_' + rightSide[pos - 1].split('_')[1]\r\n\r\n                let peresobran = '' + leftSide + '...'\r\n                let rightPeresobran = ''\r\n                for (let i = 0; i < rightSide.length; i++) {\r\n                    rightPeresobran = rightPeresobran + rightSide[i]\r\n                    if (i + 1 < rightSide.length) {\r\n                        rightPeresobran = '' + rightPeresobran + '-'\r\n                    }\r\n                }\r\n                peresobran = '' + peresobran + '' + rightPeresobran\r\n                urovenPrav[row - 1] = peresobran\r\n                setEsModel(esModel)\r\n            },\r\n            ChangePlotColor: (TmNumber, TermNumber, color) => {\r\n                esModel.TM[TmNumber].plotsColors[TermNumber] = color\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            deletePointplot: (TmNumber, TermNumber) => {\r\n                let deleteNumber =\r\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\r\n                        .length / 2\r\n                delete esModel.TM[TmNumber].coords[TermNumber][\r\n                    'x' + deleteNumber\r\n                ]\r\n                delete esModel.TM[TmNumber].coords[TermNumber][\r\n                    'y' + deleteNumber\r\n                ]\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            addNewPointPlot: (TmNumber, TermNumber) => {\r\n                let newPointNumber =\r\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\r\n                        .length /\r\n                        2 +\r\n                    1\r\n                let newCoordsNameX = 'x' + newPointNumber\r\n                let newCoordsNameY = 'y' + newPointNumber\r\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameX] = 0\r\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameY] = 0\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            changeCoordsValue: (TmNumber, TermNumber, key, value) => {\r\n                esModel.TM[TmNumber].coords[TermNumber][key] = Number(value)\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            deleteTerm: (TmNumber) => {\r\n                if (esModel.TM[TmNumber].termsCount == 1) return\r\n\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n                esModel.TM[TmNumber].termsCount =\r\n                    esModel.TM[TmNumber].termsCount - 1\r\n                //\r\n                let newTermName =\r\n                    'term' + Object.keys(esModel.TM[TmNumber].termsNames).length\r\n                delete esModel.TM[TmNumber].termsNames[newTermName]\r\n                esModel.TM[TmNumber].coords.splice(\r\n                    esModel.TM[TmNumber].coords.length - 1,\r\n                    1\r\n                )\r\n                esModel.TM[TmNumber].plotsColors.pop()\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            addNewTerm: (TmNumber) => {\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n                esModel.TM[TmNumber].termsCount =\r\n                    esModel.TM[TmNumber].termsCount + 1\r\n                let newTermName =\r\n                    'term' +\r\n                    (Object.keys(esModel.TM[TmNumber].termsNames).length + 1)\r\n                esModel.TM[TmNumber].termsNames[newTermName] = 'new_term'\r\n                let t = {\r\n                    x1: 0,\r\n                    y1: 0,\r\n                    x2: 0,\r\n                    y2: 0,\r\n                    x3: 0,\r\n                    y3: 0,\r\n                    x4: 0,\r\n                    y4: 0,\r\n                }\r\n                esModel.TM[TmNumber].coords.push(t)\r\n                esModel.TM[TmNumber].plotsColors.push('#000000')\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            changeTermName: (TmNumber, TermNumber, newName) => {\r\n                esModel.TM[TmNumber].termsNames['term' + TermNumber] = newName\r\n                setEsModel(esModel)\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n\r\n            AddTMInputLevel: (id) => {\r\n                esModel.TM.push({\r\n                    id: id,\r\n                    name: '',\r\n                    termsCount: 2,\r\n                    termsNames: { term1: '', term2: '' },\r\n                    coords: [\r\n                        {\r\n                            x1: 0,\r\n                            y1: 0,\r\n                            x2: 0,\r\n                            y2: 1,\r\n                            x3: 1,\r\n                            y3: 1,\r\n                            x4: 1,\r\n                            y4: 0,\r\n                        },\r\n                        {\r\n                            x1: 1,\r\n                            y1: 0,\r\n                            x2: 1,\r\n                            y2: 1,\r\n                            x3: 2,\r\n                            y3: 1,\r\n                            x4: 2,\r\n                            y4: 0,\r\n                        },\r\n                    ],\r\n                    plotsColors: ['#000000', '#000000'],\r\n                })\r\n                setEsModel(esModel)\r\n            },\r\n            ChangeSelectedTMName: (id, name) => {\r\n                esModel.TM[id].name = String(name)\r\n                esModel.graph.nodes[id].label = name\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(id))\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n        },\r\n    })\r\n    const [indexBodyHtml2, setindexBodyHtml2] = useState([\r\n        ['НАСТРОЙКИ'],\r\n        [\r\n            <div>\r\n                НАЗВАНИЕ ЭС:{' '}\r\n                <input\r\n                    class=\"EsNameInput\"\r\n                    value={esModel.options.Name}\r\n                    onInput={esModel.methods.changeEsName}\r\n                />\r\n                АВТОР ЭС:{' '}\r\n                <input\r\n                    class=\"EsAuthorInput\"\r\n                    value={esModel.options.Author}\r\n                    onInput={esModel.methods.changeEsAuthor}\r\n                />\r\n            </div>,\r\n        ],\r\n    ])\r\n\r\n    const { graph, events } = esModel\r\n    const [networks, setNetwork] = useState({ network: {} })\r\n    let states = { network: {} }\r\n\r\n    let uroven = 0\r\n    let zz\r\n    let pp = []\r\n    let start\r\n    let urovniObrabotki = {}\r\n    function getLevelTMObrabotki(obj, zelen) {\r\n        if (zz == undefined) {\r\n            zz = zelen\r\n            start = obj\r\n        }\r\n\r\n        for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n            if (start == obj) uroven = 0\r\n            if (esModel.graph.edges[i].to == obj) {\r\n                uroven = uroven + 1\r\n                if (zz.includes(esModel.graph.edges[i].from)) {\r\n                    pp[pp.length] = uroven\r\n                    uroven = uroven - 1\r\n                } else getLevelTMObrabotki(esModel.graph.edges[i].from)\r\n            }\r\n        }\r\n        if (start == obj) {\r\n            console.log(pp)\r\n            if (urovniObrabotki[Math.max(...pp)] == undefined) {\r\n                urovniObrabotki[Math.max(...pp)] = []\r\n                urovniObrabotki[Math.max(...pp)][\r\n                    urovniObrabotki[Math.max(...pp)].length\r\n                ] = obj\r\n                start = undefined\r\n                zz = undefined\r\n            } else {\r\n                urovniObrabotki[Math.max(...pp)][\r\n                    urovniObrabotki[Math.max(...pp)].length\r\n                ] = obj\r\n                start = undefined\r\n                zz = undefined\r\n            }\r\n        }\r\n    }\r\n\r\n    function changePravila(row, pos, value, coeff) {\r\n        esModel.methods.ChangePravila(row, pos, value, coeff)\r\n    }\r\n    function changeCoeff(row, pos, coeff, urObr) {\r\n        esModel.methods.ChangeCoeff(row, pos, coeff, urObr)\r\n    }\r\n\r\n    function cartesian(arg) {\r\n        var r = [],\r\n            args = arg\r\n        args.reduceRight(function (cont, factor, i) {\r\n            return function (arr) {\r\n                for (var j = 0, l = factor.length; j < l; j++) {\r\n                    var a = arr.slice() // clone arr\r\n                    a[i] = factor[j]\r\n                    cont(a)\r\n                }\r\n            }\r\n        }, Array.prototype.push.bind(r))(new Array(args.length))\r\n        let t = r.length\r\n        return r\r\n    }\r\n\r\n    function SendXmlModelling() {\r\n        let tempXML = {}\r\n        if (esModel.TM.length == 1) {\r\n            tempXML['TM'] = []\r\n            tempXML['TM'].push(esModel.TM)\r\n        } else tempXML['TM'] = esModel.TM\r\n        let pravilaDict = {}\r\n        let pravilaDict1 = {}\r\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\r\n            let st = '' + t\r\n            pravilaDict[st] = esModel.pravila_end[t]\r\n        }\r\n        pravilaDict1 = pravilaDict\r\n        for (var key in pravilaDict) {\r\n            if (pravilaDict[key] == '') {\r\n                pravilaDict[key] = ''\r\n            }\r\n            pravilaDict['n' + key] = pravilaDict[key]\r\n            delete pravilaDict[key]\r\n        }\r\n        tempXML['pravila_end'] = pravilaDict1\r\n        tempXML['pravila_temp'] = pravilaDict\r\n        tempXML['graph'] = esModel.graph\r\n        tempXML['counter'] = esModel.counter\r\n        tempXML['options'] = esModel.options\r\n\r\n        let tempStructure = {} // esModel.structure\r\n        for (var key in esModel.structure) {\r\n            tempStructure['n_' + key] = esModel.structure[key]\r\n        }\r\n        tempXML['structure'] = tempStructure\r\n\r\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\r\n        const zapros = esModel.zapros // {'1':'1.35','2':'1','3':'1'}\r\n        setxmlModeling(file)\r\n        const data = new FormData()\r\n        data.append('zapros', JSON.stringify(zapros))\r\n        data.append('file', file)\r\n        axios\r\n            .post('https://aesfu.ru/api/study/flm-builder', data, {\r\n                //https://aesfu.ru/api/study/flm-builder\r\n            })\r\n            .then((res) => {\r\n                if (esModel.regimZaprosa == 1) {\r\n                    var temp = res.data\r\n                    var str = ''\r\n                    temp.map((p) => {\r\n                        str += '[' + p[0] + ',' + p[1] + '] \\n'\r\n                    })\r\n                    // RenderModelingMenu(\"[\" + res.data[0] + \",\"+res.data[1]+\"]\")\r\n                    RenderModelingMenu(str)\r\n                }\r\n                if (esModel.regimZaprosa == 2) {\r\n                    console.log(esModel.structure.output)\r\n                    console.log(esModel.TM[esModel.structure.output[0] - 1])\r\n                    var temp = res.data\r\n                    var str = ''\r\n                    temp.map((item, index) => {\r\n                        str +=\r\n                            esModel.TM[esModel.structure.output[index] - 1]\r\n                                .termsNames['term' + item[0]] +\r\n                            ' с вероятностью ' +\r\n                            item[1] +\r\n                            '  '\r\n                    })\r\n                    RenderModelingMenu(str)\r\n                }\r\n            })\r\n    }\r\n\r\n    function SaveToXMLOnComputer() {\r\n        let tempXML = {}\r\n        if (esModel.TM.length == 1) {\r\n            tempXML['TM'] = []\r\n            tempXML['TM'].push(esModel.TM)\r\n        } else tempXML['TM'] = esModel.TM\r\n\r\n        console.log(esModel.pravila_end)\r\n        let pravilaDict = {}\r\n        let pravilaDict1 = {}\r\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\r\n            let st = '' + t\r\n            pravilaDict[st] = esModel.pravila_end[t]\r\n        }\r\n        pravilaDict1 = pravilaDict\r\n        for (var key in pravilaDict) {\r\n            if (pravilaDict[key] == '') {\r\n                pravilaDict[key] = ''\r\n            }\r\n            pravilaDict['n' + key] = pravilaDict[key]\r\n            delete pravilaDict[key]\r\n        }\r\n        console.log(pravilaDict)\r\n        tempXML['pravila_end'] = pravilaDict1\r\n        tempXML['pravila_temp'] = pravilaDict\r\n        tempXML['graph'] = esModel.graph\r\n        tempXML['counter'] = esModel.counter\r\n        tempXML['options'] = esModel.options\r\n\r\n        let tempStructure = {} // esModel.structure\r\n        for (var key in esModel.structure) {\r\n            tempStructure['n_' + key] = esModel.structure[key]\r\n        }\r\n        tempXML['structure'] = tempStructure\r\n\r\n        const element = document.createElement('a')\r\n        document.body.appendChild(element)\r\n\r\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\r\n        element.href = URL.createObjectURL(file)\r\n        element.download = 'myFile654.xml'\r\n        element.click()\r\n    }\r\n    function Pravila(arg) {\r\n        let uroven = 0\r\n        let urovniPravil = []\r\n        let okolo = []\r\n        okolo.push(\r\n            <div class=\"Blochek\">\r\n                {Table(esModel, 2, changePravila, changeCoeff, arg)}\r\n            </div>\r\n        )\r\n\r\n        setindexBodyHtml2(okolo)\r\n    }\r\n    function ConsoleXml(xmlStr) {\r\n        console.log(xmlStr)\r\n        const a = document.createElement('a')\r\n        document.body.appendChild(a)\r\n        a.download = 'FLMmodel.xml'\r\n        const file = new File([xmlStr], 'FLMmodel.xml', { type: 'text/xml' })\r\n        sendToServer(file)\r\n    }\r\n    function XmlOnServer() {\r\n        //let f = new File(\"./temp.xml\")\r\n        const iconv = require('iconv-lite')\r\n        const encodedData = iconv.decode(Buffer.from(xmlFiles), 'utf-8') //windows-1251 //Buffer.from(response.data)\r\n        const parser = new XMLParser()\r\n        let jObj = parser.parse(encodedData)\r\n        console.log(jObj)\r\n        /*\r\n\r\nconst axios = require('axios').default;\r\naxios.get(\"/xmlS/filedddd.xml\", {\r\n    responseType: 'arraybuffer',\r\n    responseEncoding: 'binary'\r\n\r\n}).then((response) => {\r\n\r\n\r\n})\r\n.catch((response) => {\r\n  console.log('FAILURE!!'+response);\r\n}); */\r\n    }\r\n\r\n    const changeTermName = (event) => {\r\n        input_Name = event.target.value\r\n\r\n        if (\r\n            event.target.name.split('_')[0].match(/[a-zA-Z]+/g)[0] ==\r\n            'termInput'\r\n        ) {\r\n            esModel.methods.changeTermName(\r\n                event.target.name.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.name.split('_')[1],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n\r\n    const ChangeColor = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.ChangePlotColor(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1,\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n    const DeletePointPlot = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.deletePointplot(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1\r\n            )\r\n        }\r\n    }\r\n    const changeCoordsValues = (event) => {\r\n        input_Name = event.target.name\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.changeCoordsValue(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1,\r\n                event.target.name.split('_')[0],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n    const addNewPointPlot = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.addNewPointPlot(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1\r\n            )\r\n        }\r\n    }\r\n\r\n    const AddNewTerm = (event) => {\r\n        esModel.methods.addNewTerm(event.target.id)\r\n    }\r\n    const DeleteTerm = (event) => {\r\n        esModel.methods.deleteTerm(event.target.id)\r\n    }\r\n\r\n    const RenderOptionsMenu = (selectedIndex) => {\r\n        let indexB = []\r\n        indexB = ['OPTIONS']\r\n        indexB.push(\r\n            <div>\r\n                NAME ES:\r\n                <input\r\n                    class=\"EsNameInput\"\r\n                    value={esModel.options.Name}\r\n                    onInput={esModel.methods.changeEsName}\r\n                />\r\n                AUTHOR ES:\r\n                <input\r\n                    class=\"EsAuthorInput\"\r\n                    value={esModel.options.Author}\r\n                    onInput={esModel.methods.changeEsAuthor}\r\n                />\r\n            </div>\r\n        )\r\n        setindexBodyHtml2(indexB)\r\n\r\n        //\r\n    }\r\n    const ChangeZapros = (selectedIndex) => {\r\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\r\n\r\n        esModel.methods.SetZapros(\r\n            selectedIndex.target.id,\r\n            String(selectedIndex.target.selectedIndex + 1)\r\n        )\r\n    }\r\n\r\n    //режим вывода в окне моделирования\r\n    const ChangeRegimZaprosa = (selectedIndex) => {\r\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\r\n        console.log(selectedIndex.target.value)\r\n        esModel.methods.changeRegimVivoda(selectedIndex.target.value)\r\n\r\n        //esModel.methods.SetZapros(selectedIndex.target.id, String(selectedIndex.target.selectedIndex+1))\r\n    }\r\n\r\n    const ChangeZaprosInput = (selectedIndex) => {\r\n        //console.log(selectedIndex.target.name+\"   \"+String(selectedIndex.target.value))\r\n\r\n        esModel.methods.SetZapros(\r\n            selectedIndex.target.name,\r\n            String(selectedIndex.target.value)\r\n        )\r\n    }\r\n\r\n    const RenderModelingMenu = (data) => {\r\n        let indexB = []\r\n        indexB = ['МОДЕЛИРОВАНИЕ']\r\n        console.log(esModel.structure)\r\n        //onChange={}  console.log(esModel.TM[x].name)\r\n        indexB.push(\r\n            <div>\r\n                <select onChange={ChangeRegimZaprosa}>\r\n                    <option value=\"1\">Значение</option>\r\n                    <option value=\"2\">Значение+Расшифровка</option>\r\n                </select>\r\n            </div>\r\n        )\r\n\r\n        for (let i = 0; i < esModel.structure['input'].length; i++) {\r\n            let nameTM = ''\r\n            let number = 0\r\n\r\n            for (let x = 0; x < esModel.TM.length; x++) {\r\n                if (\r\n                    esModel.TM[x].id ==\r\n                    String(esModel.structure['input'][i] - 1)\r\n                ) {\r\n                    nameTM += esModel.TM[x].name\r\n                    number = x\r\n                }\r\n            }\r\n\r\n            if (esModel.zapros[esModel.structure['input'][i]] == undefined)\r\n                esModel.methods.DefZapros(esModel.structure['input'][i])\r\n            //решаем вывести  выпадающий список или поле ввода\r\n            if (Object.keys(esModel.TM[number].coords[0]).length == 2) {\r\n                indexB.push(\r\n                    <div>\r\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\r\n                        {nameTM}):\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id={esModel.structure['input'][i]}\r\n                            onChange={ChangeZapros}\r\n                            defaultValue={\r\n                                esModel.TM[esModel.structure['input'][i] - 1]\r\n                                    .termsNames[\r\n                                    'term' +\r\n                                        esModel.zapros[\r\n                                            esModel.structure['input'][i]\r\n                                        ]\r\n                                ]\r\n                            }\r\n                        >\r\n                            {Object.values(esModel.TM[number].termsNames).map(\r\n                                (option, index) => (\r\n                                    <option\r\n                                        key={index}\r\n                                        id={option}\r\n                                        value={option}\r\n                                    >\r\n                                        {option}\r\n                                    </option>\r\n                                )\r\n                            )}\r\n                        </select>\r\n                    </div>\r\n                )\r\n            } else {\r\n                indexB.push(\r\n                    <div>\r\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\r\n                        {nameTM}):\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"...\"\r\n                            name={esModel.structure['input'][i]}\r\n                            onChange={ChangeZaprosInput}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        indexB.push(\r\n            <div>\r\n                <button onClick={SendXmlModelling}> МОДЕЛИРОВАТЬ</button>\r\n            </div>\r\n        )\r\n\r\n        console.log(data)\r\n        if (typeof data == 'string') indexB.push(<div>{data} </div>)\r\n        setindexBodyHtml2(indexB)\r\n    }\r\n\r\n    const changeSelectedTMName = (event) => {\r\n        input_Name = event.target.id\r\n        if (event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'term') {\r\n            esModel.methods.ChangeSelectedTMName(\r\n                event.target.id.split('_')[1],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n\r\n    const RenderSelectedTM = (selectedIndex) => {\r\n        //console.log(esModel)\r\n        let tm\r\n\r\n        tm = selectedIndex\r\n        let arrayTerms = []\r\n        let temp = []\r\n        let points4Plots = []\r\n        let points\r\n        inputLevelCounter = 0\r\n        let pravilaButton = []\r\n\r\n        for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n            if (\r\n                esModel.graph.nodes[i].id == selectedIndex + 1 &&\r\n                (esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                    esModel.graph.nodes[i].color == '#FF0000')\r\n            ) {\r\n                pravilaButton = [\r\n                    <button id={tm} onClick={RenderPravila}>\r\n                        {' '}\r\n                        ПРАВИЛА:{' '}\r\n                    </button>,\r\n                ]\r\n            }\r\n        }\r\n        for (let i = 0; i < esModel.TM.length; i++) {\r\n            if (esModel.TM[i].id == tm) {\r\n                tm = i\r\n            }\r\n        }\r\n\r\n        let nm = 'term_' + tm\r\n        temp.push(\r\n            <div>\r\n                <div>\r\n                    {' '}\r\n                    <label class=\"myLabel\"> ТЕРМ - МНОЖЕСТВО №{tm + 1} </label>\r\n                </div>\r\n                <label class=\"myLabel\">НАЗВАНИЕ ТМ: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={esModel.TM[tm].name}\r\n                    className=\"form-control\"\r\n                    id={nm}\r\n                    placeholder=\"...\"\r\n                    onChange={changeSelectedTMName}\r\n                />\r\n                <div></div>\r\n                <label class=\"myLabel\"> ТЕРМОВ В ТМ:  </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={esModel.TM[tm].termsCount}\r\n                    className=\"form-control\"\r\n                    placeholder=\"...\"\r\n                />\r\n                <button id={tm} onClick={AddNewTerm}>\r\n                    {' '}\r\n                    ДОБАВИТЬ ТЕРМ\r\n                </button>\r\n                <button id={tm} onClick={DeleteTerm}>\r\n                    {' '}\r\n                    УДАЛИТЬ ТЕРМ\r\n                </button>\r\n                {pravilaButton}\r\n                <div></div>\r\n            </div>\r\n        )\r\n        let TMindex = 0\r\n        for (let i = 0; i < esModel.TM[tm].coords.length; i++) {\r\n            let j = i + 1\r\n            let stringLabel = 'ТЕРМ №' + j\r\n            let stringNameTerm = 'termInput' + tm + '_' + j\r\n            points4Plots = []\r\n\r\n            for (\r\n                let j = 0;\r\n                j < Object.keys(esModel.TM[tm].coords[i]).length / 2;\r\n                j++\r\n            ) {\r\n                let xName = 'x' + (j + 1) + '_input'\r\n                let yName = 'y' + (j + 1) + '_input'\r\n\r\n                points4Plots.push(\r\n                    <div>\r\n                        x{j + 1}:{' '}\r\n                        <input\r\n                            class=\"plotInput\"\r\n                            type=\"number\"\r\n                            step=\"0.1\"\r\n                            min=\"-1000\"\r\n                            value={esModel.TM[tm].coords[i]['x' + (j + 1)]}\r\n                            id={stringNameTerm}\r\n                            name={xName}\r\n                            onInput={changeCoordsValues}\r\n                        />\r\n                        y{j + 1}:{' '}\r\n                        <input\r\n                            class=\"plotInput\"\r\n                            type=\"number\"\r\n                            step=\"0.1\"\r\n                            min=\"0\"\r\n                            value={esModel.TM[tm].coords[i]['y' + (j + 1)]}\r\n                            id={stringNameTerm}\r\n                            name={yName}\r\n                            onInput={changeCoordsValues}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n            temp.push(\r\n                <div class=\"blockMy\">\r\n                    <div class=\"blockMy\">\r\n                        <div> {stringLabel} </div>\r\n                        <div>\r\n                            <input\r\n                                name={stringNameTerm}\r\n                                value={\r\n                                    esModel.TM[tm].termsNames['term' + (i + 1)]\r\n                                }\r\n                                type=\"text\"\r\n                                onInput={changeTermName}\r\n                            />{' '}\r\n                        </div>\r\n\r\n                        <div class=\"blockMy\">\r\n                            <button\r\n                                onClick={addNewPointPlot}\r\n                                id={stringNameTerm}\r\n                            >\r\n                                +\r\n                            </button>\r\n                            <button\r\n                                onClick={DeletePointPlot}\r\n                                id={stringNameTerm}\r\n                            >\r\n                                -\r\n                            </button>\r\n                            <input\r\n                                type=\"color\"\r\n                                class=\"odin\"\r\n                                id={stringNameTerm}\r\n                                onChange={ChangeColor}\r\n                                value={esModel.TM[tm].plotsColors[i]}\r\n                            />\r\n                        </div>\r\n                        {points4Plots}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        temp.push(\r\n            <div class=\"Plot\">\r\n                <div></div>\r\n                <div>\r\n                    {App(\r\n                        esModel.TM[tm].coords,\r\n                        esModel.TM[tm].termsCount,\r\n                        esModel.TM[tm].plotsColors\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n        let okolo = []\r\n        okolo.push(<div class=\"Blochek\">{temp}</div>)\r\n        setindexBodyHtml2(okolo)\r\n        inputLevelCounter++\r\n        /* <div class = \"Razrez\" >. </div>*/\r\n    }\r\n\r\n    function GoToPravila(index) {\r\n        esModel.pravilaMode = index\r\n    }\r\n\r\n    const RenderPravila = (events) => {\r\n        GoToPravila(1)\r\n        setEsModel(esModel)\r\n\r\n        let uroven\r\n        if (events.target == undefined) uroven = events\r\n        else uroven = Number(events.target.id) + 1\r\n\r\n        console.log(uroven)\r\n        Pravila(uroven)\r\n    }\r\n    function sendToServer(file) {\r\n        const data = new FormData()\r\n        data.append('file', file)\r\n        axios\r\n            .post('http://localhost:8000/upload', data, {\r\n                // receive two    parameter endpoint url ,form data\r\n            })\r\n            .then((res) => {\r\n                // then print response status\r\n                XmlOnServer()\r\n                setXmlName('' + xmlFiles.name)\r\n            })\r\n    }\r\n\r\n    function testINFO() {\r\n        const index = esModel.graph.nodes.findIndex(\r\n            (obj) => obj.color === '#FF0000'\r\n        )\r\n        console.log(index) // 1\r\n\r\n        ///esModel.graph.nodes.map((node) => {if (node.color == \"#FF0000\") console.log ()   })\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const iconv = require('iconv-lite')\r\n        const fileToArrayBuffer = require('file-to-array-buffer')\r\n        const reader = new FileReader()\r\n        var encodedData = ''\r\n\r\n        const parser = new XMLParser()\r\n        reader.readAsText(xmlFiles)\r\n        reader.onload = (_event) => {\r\n            const content = _event.target.result\r\n            let jObj = parser.parse(content)\r\n\r\n            console.log(jObj)\r\n            if (jObj.TM.length == undefined) {\r\n                esModel.TM = []\r\n                esModel.TM[0] = jObj.TM\r\n            } else esModel.TM = jObj.TM\r\n\r\n            esModel.graph = jObj.graph\r\n            esModel.counter = jObj.counter\r\n            esModel.options = jObj.options\r\n            let tempStructure = {}\r\n            for (let i = 0; i < Object.keys(jObj.structure).length; i++) {\r\n                tempStructure[Object.keys(jObj.structure)[i].split('_')[1]] =\r\n                    jObj.structure[Object.keys(jObj.structure)[i]]\r\n            }\r\n\r\n            esModel.structure = tempStructure\r\n            esModel.pravila_end = [] //jObj.pravila_end\r\n            for (let i = 0; i < Object.keys(jObj.pravila_temp).length; i++) {\r\n                esModel.pravila_end[i] = jObj.pravila_temp['n' + i]\r\n            }\r\n            setEsModel(esModel)\r\n            RenderOptionsMenu()\r\n            // Do the parsing with content\r\n        }\r\n    }\r\n    const handleFileSelect = (event) => {\r\n        setXmlFiles(event.target.files[0])\r\n    }\r\n    let inp_termMn_1 = 8\r\n    /*\r\n<button  onClick={ConsoleXml}> XML</button>\r\n    <button  onClick={SaveModelToXML}> TO XML</button>\r\n    <input type=\"file\" id=\"myFile\" onChange={(e)=>UploadXML(e)} />\r\n*/\r\n    return (\r\n        <div>\r\n            <button onClick={SaveToXMLOnComputer}>\r\n                SAVE MODEL TO COMPUTER\r\n            </button>\r\n            <button onClick={esModel.methods.ChangeX}>SORT</button>\r\n            <button onClick={RenderOptionsMenu}>OPTIONS</button>\r\n            <button onClick={RenderModelingMenu}> MODELING</button>\r\n            <input type=\"file\" onChange={handleFileSelect} />\r\n            <button type=\"button\" onClick={handleSubmit}>\r\n                Загрузить\r\n            </button>\r\n            <button type=\"button\" style={{ marginLeft: '4px' }}>\r\n                <a target=\"_blank\" href=\"https://aesfu.ru/method/flm-builder/instructions\">Документация</a>\r\n            </button>\r\n\r\n            <div class=\"Blochek\">\r\n                {' '}\r\n                <Graph\r\n                    id=\"graph\"\r\n                    getNetwork={(network) => {\r\n                        networks.network = network\r\n                        setNetwork(networks)\r\n                    }}\r\n                    graph={esModel.graph}\r\n                    options={options}\r\n                    events={esModel.events}\r\n                    style={{\r\n                        width: '800px',\r\n                        height: '600px',\r\n                        position: 'absolute',\r\n                        right: '0',\r\n                        border: 'solid',\r\n                    }}\r\n                />\r\n            </div>\r\n            <div class=\"blockMy\"> {indexBodyHtml2}</div>\r\n        </div>\r\n    )\r\n}\r\nReactDOM.render(<FlmTree />, document.getElementById('root'))\r\n","import React from \"react\";\r\n\r\nconst EditableRow = ({\r\n  editFormData,\r\n  handleEditFormChange,\r\n  handleCancelClick,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name...\"\r\n          name=\"fullName\"\r\n          value={editFormData.fullName}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an address...\"\r\n          name=\"address\"\r\n          value={editFormData.address}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"text\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phone number...\"\r\n          name=\"phoneNumber\"\r\n          value={editFormData.phoneNumber}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <input\r\n          type=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email...\"\r\n          name=\"email\"\r\n          value={editFormData.email}\r\n          onChange={handleEditFormChange}\r\n        ></input>\r\n      </td>\r\n      <td>\r\n        <button type=\"submit\">Save</button>\r\n        <button type=\"button\" onClick={handleCancelClick}>\r\n          Cancel\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default EditableRow;\r\n"],"sourceRoot":""}