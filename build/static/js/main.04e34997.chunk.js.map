{"version":3,"sources":["Plots.js","Table.js","components/ReadOnlyRow.js","index.js"],"names":["mi","App","points","valuesPlots","colors","plots","i","dataTemp","j","Object","keys","length","x","y","color","className","size","data","style","strokeLinejoin","strokeWidth","width","height","display","stroke","title","line","ticks","text","fill","ReactDOM","render","document","querySelector","Table","model","levelPravil","changeList","changeCoeff","selectedTM","tempus","gettingLevelPravil","select","cartesian","arg","r","args","reduceRight","cont","factor","arr","l","a","slice","Array","prototype","push","bind","t","unshift","cartesian2","undefined","console","log","my","TM","options","name","urovneyObrabotki","id","termsCount","termsNames","term1","term2","term3","coords","x1","y1","x2","y2","x3","y3","x4","y4","plotsColors","pravila_end","1","shapka","termsInputArray","termsInputArray2","tempArray","selectedArray","otarray","doarray","toNode","massivFrom","graph","edges","to","Number","from","otKokogo","doKokogo","termName","eval","map","el","urPravil","temp","temp2","split","ChangeSelect","event","preventDefault","target","getAttribute","row","position","selectedIndex","ChangeCoeff","val","value","urovPravil","prav","index","array","change","urovenPravil","pravila","ReadOnlyRow","rowNumber","rightSide","models","CustomSelect","poryadok","onChange","defaultValue","option","start","class","onInput","type","step","min","max","require","XMLParser","inputLevelCounter","input_Name","FlmTree","randomColor","red","Math","floor","random","toString","padStart","green","blue","createNode","esModel","counter","setEsModel","nodes","font","label","shape","physics","group","locale","interaction","hover","tooltipDelay","selectable","multiselect","dragView","manipulation","enabled","initiallyActive","addNode","editEdge","addEdge","callback","colorChanges","String","methods","UpdatePravila","networks","network","setData","addEdgeMode","deleteEdge","splice","deleteNode","toUninstall","willUpdate","newNames","RenderSelectedTM","layout","hierarchical","direction","sortMethod","blockShifting","levelSeparation","useState","xmlFiles","setXmlFiles","xmlModeling","setxmlModeling","xmlName","setXmlName","o2x","window","onbeforeunload","dataS","regimZaprosa","zapros","Name","Author","userRequest","structure","pravilaMode","events","release","getPositions","dragEnd","pos","click","doubleClick","canvas","pointer","AddTMInputLevel","showPopup","changeRegimVivoda","DefZapros","TmNumber","SetZapros","nymberTM","urovenPrav","leftSide","peresobran","rightPeresobran","RenderPravila","ChangeX","zelen","fiolet","obrabotka","krasn","urovniObrabotki","pp","getLevelTMObrabotki","numberKey","key","outCounter","leftArray","cartes","start2","start3","rSide","changeEsName","RenderOptionsMenu","changeEsAuthor","ChangePravila","urovenObrabotki","ChangePlotColor","TermNumber","deletePointplot","deleteNumber","addNewPointPlot","newPointNumber","newCoordsNameX","newCoordsNameY","changeCoordsValue","deleteTerm","newTermName","pop","popup","addNewTerm","changeTermName","newName","ChangeSelectedTMName","modifiedStr","replace","substr","indexBodyHtml2","setindexBodyHtml2","setNetwork","states","uroven","zz","obj","includes","changePravila","coeff","urObr","SendXmlModelling","tempXML","pravilaDict1","pravilaDict","tempStructure","file","Blob","FormData","append","JSON","stringify","axios","post","then","res","str","p","RenderModelingMenu","output","item","SaveToXMLOnComputer","element","createElement","body","appendChild","href","URL","createObjectURL","download","Pravila","okolo","ConsoleXml","xmlStr","sendToServer","File","XmlOnServer","encodedData","decode","Buffer","jObj","parse","match","ChangeColor","DeletePointPlot","changeCoordsValues","AddNewTerm","DeleteTerm","indexB","ChangeZapros","ChangeRegimZaprosa","ChangeZaprosInput","nameTM","number","values","placeholder","onClick","changeSelectedTMName","tm","points4Plots","pravilaButton","nm","stringLabel","stringNameTerm","xName","yName","GoToPravila","testINFO","findIndex","handleSubmit","reader","FileReader","parser","readAsText","onload","_event","content","result","pravila_temp","handleFileSelect","files","inp_termMn_1","marginLeft","getNetwork","right","border","getElementById"],"mappings":"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","file":"static/js/main.04e34997.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"react-vis/dist/style.css\";\r\n\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  LineMarkSeries,\r\n  DiscreteColorLegend\r\n} from \"react-vis\";\r\n\r\nlet mi=0\r\n//<DiscreteColorLegend  orientation=\"horizontal\" items = {series}    />\r\nlet series= [{\r\n  title: \"Apples\",\r\n  color : \"#000000\",\r\n},\r\n{title: \"Orange\",\r\ndisabled: false,\r\ndata: [{ x: 0, y: 12 }, { x: 1, y: 22 }],\r\ncolor : \"#FF6c0A\",\r\n},\r\n\r\n]\r\n\r\nfunction getRandomColor() {\r\nvar letters = '0123456789ABCDEF';\r\nvar color = '#';\r\nfor (var i = 0; i < 6; i++)\r\n{\r\n  color += letters[Math.floor(Math.random() * 16)];\r\n}\r\nreturn color;\r\n}\r\nexport default function App(points, valuesPlots, colors) {\r\n  if(valuesPlots > 0)\r\n  {\r\n    mi = valuesPlots\r\n  }\r\n  let x1_1,x2_1,x3_1,y1_1,y2_1,y3_1\r\n  let x4_1 = 1\r\n  let y4_1 = 0\r\n  let x1_2,x2_2,x3_2,x4_2,y1_2,y2_2,y3_2,y4_2\r\n  let x1_3,x2_3,x3_3,x4_3,y1_3,y2_3,y3_3,y4_3\r\n  let x1_4,x2_4,x3_4,x4_4,y1_4,y2_4,y3_4,y4_4\r\n\r\n\r\n\r\n  let x1_5,x2_5,x3_5,x4_5,y1_5,y2_5,y3_5,y4_5\r\n  let x1_6,x2_6,x3_6,x4_6,y1_6,y2_6,y3_6,y4_6\r\n  let x1_7,x2_7,x3_7,x4_7,y1_7,y2_7,y3_7,y4_7\r\n  let x1_8,x2_8,x3_8,x4_8,y1_8,y2_8,y3_8,y4_8\r\n  let x1_9,x2_9,x3_9,x4_9,y1_9,y2_9,y3_9,y4_9\r\n  let x1_10,x2_10,x3_10,x4_10,y1_10,y2_10,y3_10,y4_10\r\n  const lines = [{x:5,y:2},{x:6,y:2}]\r\n\r\n\r\n  let color = []\r\n  let items = {title: \"hello\", color : \"#D1D0CE\"}\r\n/*\r\n  //заполнить все переменные для всех графиков значениями координат\r\n  for (let i = 0; i < mi; i++)\r\n  {\r\n    if(typeof points[i] == 'object' )\r\n    {\r\n      let b = points[i]\r\n      eval(\"x1_\"+(i+1) + \"=\" +b[0]) \r\n      eval(\"y1_\"+(i+1) + \"=\" +b[1]) \r\n      eval(\"x2_\"+(i+1) + \"=\" +b[2]) \r\n      eval(\"y2_\"+(i+1) + \"=\" +b[3]) \r\n      eval(\"x3_\"+(i+1) + \"=\" +b[4]) \r\n      eval(\"y3_\"+(i+1) + \"=\" +b[5]) \r\n      eval(\"x4_\"+(i+1) + \"=\" +b[6]) \r\n      eval(\"y4_\"+(i+1) + \"=\" +b[7])  \r\n      color[i] = getRandomColor();\r\n    }\r\n  }\r\n*/\r\n let plots = []\r\nfor (let i = 0; i < mi; i++)\r\n  {\r\n    if(typeof points[i] == 'object' )\r\n    {\r\n      let dataTemp = [{}]\r\n      for(let j = 0; j <Object.keys(points[i]).length/2; j++)\r\n      {dataTemp[j]=({x: points[i][\"x\"+(j+1)],y: points[i][\"y\"+(j+1)] })\r\n\r\n      }\r\n \r\n  plots[i]=[<LineMarkSeries\r\n  color =  {colors[i]}\r\n  className=\"1-series\"\r\n  size='3.5'\r\n  \r\n\r\n\r\n  data={dataTemp}\r\n  style={{\r\n    strokeLinejoin: \"round\",\r\n    strokeWidth: 2\r\n  }}\r\n/>\r\n]\r\n   } }\r\n  return (    \r\n    <XYPlot width={700} height={200} display = \"inline-block\">\r\n      <HorizontalGridLines style={{ stroke: \"#D1D0CE\" }} />\r\n      <VerticalGridLines style={{ stroke: \"#D1D0CE\" }} />\r\n      <XAxis\r\n        title=\"x\"\r\n        style={{\r\n          line: { stroke: \"#111111\" },\r\n          ticks: { stroke: \"#6b6b76\" },\r\n          text: { stroke: \"none\", fill: \"#6b6b76\" }\r\n        }}\r\n      />\r\n       <YAxis\r\n        title=\"Коэфф. уверенности\"\r\n        style={{\r\n          line: { stroke: \"#6b6b76\" },\r\n          ticks: { stroke: \"#6b6b76\" },\r\n          text: { stroke: \"none\", fill: \"#6b6b76\"}\r\n        }}\r\n      />\r\n      \r\n  {plots}\r\n\r\n      \r\n\r\n  \r\n    </XYPlot>\r\n  );\r\n  \r\n}\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport ReadOnlyRow from \"./components/ReadOnlyRow\";\r\nimport ReactDOM from \"react-dom\";\r\nexport  default function Table(model, levelPravil, changeList, changeCoeff,selectedTM) {\r\n\r\n  let tempus=[[]]\r\n  let gettingLevelPravil = levelPravil \r\n  let select = selectedTM\r\n  if (select == undefined)\r\n  select = 1\r\n  console.log(select)\r\n  if(typeof(gettingLevelPravil) != \"string\")\r\n  {\r\n    gettingLevelPravil =1 \r\n  \r\n  }\r\n  function cartesian(arg) {\r\n    var r = [], args = arg;\r\n    args.reduceRight(function(cont, factor, i) {\r\n        return function(arr) {\r\n            for (var j=0, l=factor.length; j<l; j++) {\r\n                var a = arr.slice(); // clone arr\r\n                a[i] = factor[j];\r\n                cont(a);\r\n            }\r\n        };\r\n    }, Array.prototype.push.bind(r))(new Array(args.length));\r\nlet t = r.length\r\n   for(let i = 0; i < t; i++)\r\n    {\r\n      r[i].unshift(i+1)\r\n    }   \r\n    return r;\r\n}\r\nfunction cartesian2(arg) {\r\n  var r = [], args = arg;\r\n  args.reduceRight(function(cont, factor, i) {\r\n      return function(arr) {\r\n          for (var j=0, l=factor.length; j<l; j++) {\r\n              var a = arr.slice(); // clone arr\r\n              a[i] = factor[j];\r\n              cont(a);\r\n          }\r\n      };\r\n  }, Array.prototype.push.bind(r))(new Array(args.length));\r\nlet t = r.length \r\n  return r;\r\n}\r\n\r\n//посмотреть терм-множ. у входного \r\n//посмотреть терм-множ. у обработки-1\r\n//это будет названия столбцов \r\n//console.log(model.termMnogestvaInputLevel[0])\r\n\r\nlet my = model\r\n//if(model == null)\r\nif(my.TM == undefined)\r\nmy = {  \r\n  options: {\r\n    name: \"Экспертная система 1\",\r\n    urovneyObrabotki: 3,\r\n  },\r\n  TM: \r\n  [\r\n    //объект первого терм множества входа\r\n    {\r\n        id: '1',\r\n        name: 'Тип постройки',\r\n        termsCount:3,\r\n        termsNames: {term1: 'Общ. здание', term2: 'Жилое здание', term3:'С/Х',},\r\n        coords:[{x1:0, y1:0, x2:1, y2:1, x3:1, y3:5},\r\n                {x1:2, y1:0, x2:3, y2:1, x3:3, y3:5 },\r\n                {x1:4, y1:0, x2:5, y2:2, x3:6, y3:2, x4:7, y4:0 } ,       \r\n              ],    \r\n              plotsColors:['#000000','#000000','#FF00D0',] ,   \r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Материал',\r\n      termsCount:3,\r\n      termsNames: {term1: 'Дерево', term2: 'Бетон', term3:'Кирпич',},\r\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\r\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\r\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \r\n            ],    \r\n            plotsColors:['#00FF00','#E30202','#FF00D0',] , \r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Климат',\r\n      termsCount:3,\r\n      termsNames: {term1: 'Холодный', term2: 'Прохладный', term3:'Теплый',},\r\n      coords:[{x1:0, y1:0, x2:1, y2:1, x3:2, y3:0},\r\n              {x1:2, y1:0, x2:3, y2:1, x3:4, y3:0 },\r\n              {x1:4, y1:0, x2:5, y2:1, x3:6, y3:0, } ,        \r\n            ],    \r\n            plotsColors:['#00FF00','#E30202','#FF00D0',] ,     \r\n              },\r\n  ]  ,\r\n  pravila_end: \r\n  {1:['1_1...1_1',\r\n  '1_2...2_0.8',\r\n  '1_3...1_0.9',\r\n\r\n  '2_1...2_0.7',\r\n  '2_2...1_0.9',\r\n  '2_3...2_1',\r\n\r\n  '3_1...1_0.9',\r\n  '3_2...1_0.8',\r\n  '3_3...2_0.9',\r\n  ], }}\r\n \r\n  const shapka= [];\r\n  let termsInputArray=[[]]\r\n  let termsInputArray2=[[]]\r\n  let tempArray=[]\r\n  let selectedArray=[]\r\n  let otarray=[]\r\n  let doarray=[]\r\n  otarray.push(my.TM[0])\r\n  otarray.push(my.TM[1])\r\n  doarray.push(my.TM[2])\r\n\r\nif(model.TM!=undefined)\r\n{\r\n  otarray = []\r\n  doarray=[]\r\n  console.log(selectedTM)\r\n  let toNode = selectedTM\r\n\r\n  \r\n  let massivFrom =[]\r\n  //создаем массив otKokogo\r\n  for(let i = 0; i < my.graph.edges.length; i ++)\r\n        {\r\n          if(my.graph.edges[i].to == Number(toNode))\r\n          {\r\n            massivFrom.push(my.graph.edges[i].from )\r\n          }\r\n        }  \r\n        for(let i = 0; i <massivFrom.length; i ++)\r\n        {for(let j = 0; j <my.TM.length; j ++)\r\n          {\r\n            if(my.TM[j].id == Number(massivFrom[i]-1))\r\n          {\r\n            otarray.push(my.TM[j])\r\n          }  \r\n          } \r\n        }       \r\n        for(let i = 0; i < my.TM.length; i ++)\r\n        {\r\n          if(my.TM[i].id == Number(toNode-1))\r\n          { \r\n            doarray.push(my.TM[i])\r\n          }\r\n        }\r\n        console.log(doarray)\r\n}\r\n  //делаем массив всех термов из терммножества входа\r\n  \r\n  \r\n \r\n  let otKokogo = otarray//eval(\"my.TM\")// dfdf\r\n  let doKokogo = doarray//eval(\"my.termMnogestvaOutputLevel\") \r\n  console.log(otKokogo)\r\n  shapka.push(<th>№</th>)\r\n  for(let i = 0; i < otKokogo.length; i++)\r\n  {\r\n   let  name = otKokogo[i].name\r\nshapka.push(<th>{otKokogo[i].name}</th>)\r\n\r\n  }\r\n\r\n  for(let i = 0; i < doKokogo.length; i++)\r\n  {\r\n   let  name = doKokogo[i].name\r\nshapka.push(<th>{doKokogo[i].name}</th>)\r\n\r\n  }\r\n\r\n \r\n  for(let i = 0; i < otKokogo.length; i++)\r\n{    \r\n \r\n  for(let j = 0; j < otKokogo[i].termsCount; j++)\r\n  {     \r\n    console.log(otKokogo[0].termsNames['term1'])   \r\n        console.log(i )\r\n        console.log(j+1 )\r\n    let termName = eval(\"otKokogo[\" +i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n    tempArray[j] = termName       \r\n  } \r\n    termsInputArray2[i]=(tempArray)    \r\n    tempArray = []  \r\n}\r\n\r\ntermsInputArray2 =cartesian2(termsInputArray2)\r\n\r\ntermsInputArray2.map((el)=> (el.push(\"...\")))\r\n\r\n  for(let i = 0; i < doKokogo.length; i++)\r\n  {    termsInputArray2.map((el)=> (\r\n\r\n    el.push(1)    \r\n    ))\r\n\r\n    for(let j = 0; j <doKokogo[i].termsCount; j++)\r\n    {     \r\n      let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n      tempArray[j] = {id: (j+1), name :termName}     \r\n\r\n    } \r\n    selectedArray[i]=(tempArray)    \r\n      tempArray = []  \r\n  }\r\n \r\n\r\nfor(let i = 0; i < doKokogo.length; i++)\r\n{    let tempArray=[]\r\n  for(let j = 0; j < doKokogo[i].termsCount; j++)\r\n  {     \r\n    let termName = eval(\"doKokogo[\"+i+\"].termsNames['term\"+(j+1)+\"']\")     \r\n    tempArray[j] = {id: (j+1), name :termName}     \r\n\r\n  } \r\n  selectedArray[i]=(tempArray)    \r\n    tempArray = []  \r\n}\r\nconsole.log(selectedTM)\r\nlet urPravil = eval(\"my.pravila_end[\" +selectedTM+\"]\") \r\nif(urPravil!= undefined)\r\n  {    \r\n    for(let i =0; i<urPravil.length;i++)\r\n    {\r\n      let temp \r\n      let temp2 =[]\r\n      for(let j=0; j< urPravil[i].split(\"...\")[0].split(\"_\").length+1; j++)    \r\n    {\r\n      let termName\r\n        if(j==0)\r\ntermName = i+1\r\n        else{ temp= urPravil[i].split(\"...\")[0].split(\"_\")[j-1]\r\n         termName = eval(\"otKokogo[\"+(j-1)+\"].termsNames['term\"+(temp)+\"']\") \r\n       \r\n  }\r\n  temp2[j] = termName}\r\n  tempus[i] = temp2    }}\r\n  const ChangeSelect = (event) => {\r\n  event.preventDefault();\r\n\r\n  const fieldName = event.target.getAttribute(\"name\");\r\n  let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\r\n let row = event.target.id.split(\"__\")[0].split(\"_\")[1]\r\n let position = event.target.id.split(\"__\")[1]\r\n position = position.split(\"/\")[0]\r\nchangeList(row, position,event.target.options[event.target.selectedIndex].id, select)\r\n\r\nfor(let i = 0; i<termsInputArray2[row-1].length; i++ )\r\n{\r\nif(termsInputArray2[position-1][i] == \"...\")\r\n{\r\n  termsInputArray2[position-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\r\n  break\r\n}}};\r\nconst ChangeCoeff= (event) => {\r\n  event.preventDefault();\r\n\r\nlet val = event.target.value\r\n // const fieldName = event.target.getAttribute(\"name\");\r\n let location = event.target.id.split(\"__\")[0].split(\"_\")[0]\r\nlet row = event.target.id.split(\"__\")[0].split(\"_\")[1]\r\nlet position = event.target.id.split(\"__\")[1]\r\nlet urovPravil =  select//event.target.id.split(\"__\")[0].split(\"_\")[0]\r\nposition = position.split(\"/\")[0]\r\nchangeCoeff(row, position,val,urovPravil)\r\nconsole.log(\"row=\"+row)\r\nconsole.log(\"position=\"+position)\r\nconsole.log(\"urovPravil=\"+urovPravil)\r\n\r\n\r\n/*\r\nfor(let i = 0; i<termsInputArray2[location-1].length; i++ )\r\n{\r\n\r\nif(termsInputArray2[location-1][i] == \"...\")\r\n{\r\ntermsInputArray2[location-1][Number(Number(i)+Number(position))] = Number(event.target.options[event.target.selectedIndex].id)\r\nbreak\r\n\r\n}}*/\r\n};\r\nlet prav\r\n\r\nprav = eval(\"my.pravila_end\")\r\nconsole.log(prav)\r\n\r\n  return (\r\n    <div className=\"LayerElement\">\r\n      <form >\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n                {shapka}              \r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {\r\n                      tempus.map((stroke,index) => (                        \r\n                           <ReadOnlyRow\r\n                              stroke={stroke}\r\n                               array= {selectedArray}\r\n                               change = {ChangeSelect}\r\n                               urovenPravil = {levelPravil}\r\n                               index = {index+1}\r\n                               pravila = {prav[Number(select)][index]}   \r\n                               changeCoeff = {ChangeCoeff}                            \r\n                            /> ))\r\n            }\r\n          </tbody>\r\n        </table>\r\n      </form>\r\n\r\n   \r\n    </div>\r\n  );\r\n};\r\nReactDOM.render(<Table />, document.querySelector(\"#root\"));\r\n","import React from \"react\";\r\n\r\nconst ReadOnlyRow = ({ stroke,  array,change, urovenPravil, index, pravila, changeCoeff }) => {\r\n \r\n  let rowNumber = index\r\nlet rightSide = pravila.split(\"...\")[1].split(\"-\")\r\n\r\nif(rightSide == null)\r\nrightSide= \"1_1-1_1\"\r\n\r\n/* \r\n  <td>{stroke[0]}</td>\r\n      <td>{stroke[1]}</td>\r\n      <td>{stroke[2]}</td>\r\n      <td>{stroke[3]}</td>\r\n      <td>1\r\n       {/* <button\r\n          type=\"button\"\r\n          onClick={(event) => handleEditClick(event, contact)}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button type=\"button\" onClick={() => handleDeleteClick(contact.id)}>\r\n          Delete\r\n        </button>\r\n        </td>\r\n        <td>1</td>\r\n*/\r\n\r\nlet models= [\r\n  {\r\n      id: 1,\r\n      name: '',\r\n  },\r\n\r\n]\r\nif(typeof(stroke[1]) == \"string\" &&array.length >0)\r\nfor(let i =0;i < array[0].length; i++)\r\n{\r\nmodels[i] = {id:(i+1),\r\nname:array[0][i]\r\n}\r\n\r\n}\r\n\r\n    // при выборе нового значения в категории\r\n    const onCategoriesSelectChange = (e) => {\r\n\r\n      // преобразуем выбранное значение опции списка в число - идентификатор категории\r\n      const categoryId = parseInt(e.target.options[e.target.selectedIndex].value);\r\n  \r\n      console.log(e.target.options[e.target.selectedIndex].label)\r\n  }\r\n\r\n\r\n\r\n\r\n// компонент пользовательского выпадающего списка\r\nconst CustomSelect = ({ id, options, onChange, poryadok }) => {\r\n  let b\r\n  return (\r\n      <select className=\"custom-select\" id={id} onChange={change} defaultValue={options[rightSide[poryadok].split(\"_\")[0]-1].name}>\r\n          { options.map((option, index) =>\r\n             <option key={id + index} id={option.id} value = {option.name}>{option.name}</option>\r\n          ) }\r\n\r\n      </select>\r\n  )\r\n}\r\n  let arr = []\r\n  let start = true\r\n  for (let i = 0; i < stroke.length; i ++)\r\n  {\r\nif(start && typeof(stroke[i])=='string')\r\n{arr[0] =<td>{stroke[i]}</td>\r\n\r\n\r\n}\r\n\r\n   else {\r\n    arr.push(<td>{stroke[i]}</td>)\r\n   }\r\n   \r\n   \r\nstart = false\r\n\r\n  }\r\n  if(typeof(stroke[1]) == \"string\" &&array.length >0)\r\n  for(let i =0; i <array.length; i++)\r\n  {\r\n    let temp = urovenPravil+\"_\"+rowNumber+\"_\"+\"_\"+(i+1)+\"/\" +array.length\r\n    arr.push(<td><CustomSelect id={temp} options={array[i]}  poryadok ={i}/>\r\n    <input  class = \"plotInput\" onInput={changeCoeff}  type='number' step=\"0.1\" min='0' max='1'  id = {temp} name=\"d\"  value={rightSide[i].split(\"_\")[1]} />\r\n    </td>)\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      {arr}\r\n    \r\n    </tr>\r\n  );\r\n};\r\n//  } \r\nexport default ReadOnlyRow;\r\n","import Graph from 'react-graph-vis'\r\nimport React, { useState, useEffect } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './Plots.js'\r\nimport Table from './Table.js'\r\nimport 'react-vis/dist/style.css'\r\nimport axios from 'axios'\r\nconst { XMLParser } = require('fast-xml-parser')\r\n\r\nlet inputLevelCounter = 0\r\nlet input_Name\r\n\r\nfunction FlmTree() {\r\n    function randomColor() {\r\n        const red = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        const green = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        const blue = Math.floor(Math.random() * 256)\r\n            .toString(16)\r\n            .padStart(2, '0')\r\n        return `#${red}${green}${blue}`\r\n    }\r\n    const createNode = (x, y) => {\r\n        const color = randomColor()\r\n\r\n        esModel.counter++\r\n        setEsModel(esModel)\r\n        esModel.graph.nodes.push({\r\n            x: x,\r\n            y: y,\r\n            color: '#F5DEB3',\r\n            id: esModel.counter,\r\n            font: { size: 10 },\r\n            size: 30,\r\n            label: '',\r\n            title: '',\r\n            shape: 'dot',\r\n            physics: 'false',\r\n            group: 3,\r\n        })\r\n    }\r\n\r\n    const options = {\r\n        locale: 'ru',\r\n        interaction: {\r\n            hover: true,\r\n            tooltipDelay: 10,\r\n            selectable: true,\r\n            multiselect: true,\r\n            dragView: true,\r\n        },\r\n        manipulation: {\r\n            enabled: true,\r\n            initiallyActive: true,\r\n            addNode: false,\r\n            editEdge: false,\r\n            addEdge: function (data, callback) {\r\n                esModel.graph.edges.push(data)\r\n                callback(data)\r\n                let colorChanges = {}\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                esModel.pravila_end = []\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    console.log(esModel.graph.nodes[i].color)\r\n                    if (\r\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                networks.network.addEdgeMode()\r\n            },\r\n            deleteEdge: function (data, callback) {\r\n                callback(data)\r\n\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (esModel.graph.edges[i].id == data.edges[0]) {\r\n                        esModel.graph.edges.splice(i, 1)\r\n                        break\r\n                    }\r\n                }\r\n\r\n                let colorChanges = {}\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                esModel.pravila_end = []\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#F5DEB3'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                        String(esModel.graph.nodes[i].color) == '#DA70D6'\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n            deleteNode: function (data, callback) {\r\n                callback(data)\r\n                let toUninstall = []\r\n\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (\r\n                        esModel.graph.edges[i].from == data.nodes[0] ||\r\n                        esModel.graph.edges[i].to == data.nodes[0]\r\n                    ) {\r\n                        toUninstall.push(i)\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == data.nodes[0] &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n\r\n                for (let i = 0; i < toUninstall.length; i++) {\r\n                    esModel.graph.edges.splice(\r\n                        toUninstall[toUninstall.length - 1 - i],\r\n                        1\r\n                    )\r\n                }\r\n                // esModel.graph.edges.splice(i, 1);\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].id == data.nodes[0]) {\r\n                        esModel.graph.nodes.splice(i, 1)\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    if (esModel.TM[i].id == data.nodes[0] - 1) {\r\n                        esModel.TM.splice(i, 1)\r\n                    }\r\n                }\r\n                esModel.counter--\r\n\r\n                let newNames = [{}]\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    newNames[esModel.graph.nodes[i].id] = i + 1\r\n                    esModel.graph.nodes[i].id = i + 1\r\n                }\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    esModel.TM[i].id = i\r\n                }\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    esModel.graph.edges[i].from =\r\n                        newNames[esModel.graph.edges[i].from]\r\n                    esModel.graph.edges[i].to =\r\n                        newNames[esModel.graph.edges[i].to]\r\n                }\r\n                let colorChanges = {}\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    colorChanges[esModel.graph.nodes[i].id] = [0, 0]\r\n                }\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    colorChanges[esModel.graph.edges[i].to][1] = 1\r\n                    colorChanges[esModel.graph.edges[i].from][0] = 1\r\n                }\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#008000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 1 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#DA70D6'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 1\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#FF0000'\r\n                    }\r\n                    if (\r\n                        colorChanges[esModel.graph.nodes[i].id][0] == 0 &&\r\n                        colorChanges[esModel.graph.nodes[i].id][1] == 0\r\n                    ) {\r\n                        esModel.graph.nodes[i].color = '#F5DEB3'\r\n                    }\r\n                }\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(0)\r\n            },\r\n        },\r\n        layout: {\r\n            hierarchical: {\r\n                enabled: false,\r\n                direction: 'LR',\r\n                sortMethod: 'directed',\r\n                blockShifting: false,\r\n                levelSeparation: 180,\r\n            },\r\n        },\r\n        edges: {\r\n            color: '#000000',\r\n        },\r\n    }\r\n\r\n  \r\n    \r\n    const [xmlFiles, setXmlFiles] = useState([])\r\n    const [xmlModeling, setxmlModeling] = useState([])\r\n    const [xmlName, setXmlName] = useState([])\r\n\r\n    var o2x = require('object-to-xml')\r\n    window.onbeforeunload = function () {\r\n        return 'A XHR request is pending, are you sure you want to leave ?'\r\n    }\r\n    const [dataS, setData] = useState()\r\n    /*\r\n  useEffect(() => {\r\n    fetch('/api')\r\n    .then(response => response.json()\r\n    .then(response => setData(response.message)))\r\n  } )*/\r\n    const [esModel, setEsModel] = useState({\r\n        regimZaprosa: 1,\r\n        zapros: {},\r\n        options: {\r\n            Name: '',\r\n            Author: '',\r\n            userRequest: [],\r\n        },\r\n        structure: {},\r\n        pravilaMode: 0,\r\n        TM: [],\r\n        pravila_end: {\r\n            1: [\r\n                '1_1...1_1',\r\n                '1_2...2_0.8',\r\n                '1_3...1_0.9',\r\n                '2_1...2_0.7',\r\n                '2_2...1_0.9',\r\n                '2_3...2_1',\r\n                '3_1...1_0.9',\r\n                '3_2...1_0.8',\r\n                '3_3...2_0.9',\r\n            ],\r\n        },\r\n        counter: 0,\r\n        graph: {\r\n            nodes: [],\r\n            edges: [],\r\n        },\r\n        events: {\r\n            release: ({ nodes, edges }) => {\r\n                let pos = networks.network.getPositions()\r\n            },\r\n            dragEnd: ({ nodes, edges }) => {\r\n                let pos = networks.network.getPositions()\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\r\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\r\n                }\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n            click: ({ nodes, edges }) => {\r\n                if (nodes[0] != null) {\r\n                    RenderSelectedTM(nodes[0] - 1)\r\n                }\r\n            },\r\n\r\n            doubleClick: ({ pointer: { canvas } }) => {\r\n                let pos = networks.network.getPositions()\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    esModel.graph.nodes[i].x = pos[esModel.graph.nodes[i].id].x\r\n                    esModel.graph.nodes[i].y = pos[esModel.graph.nodes[i].id].y\r\n                }\r\n                esModel.methods.AddTMInputLevel(esModel.graph.nodes.length)\r\n                createNode(canvas.x, canvas.y)\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(esModel.graph.nodes.length - 1)\r\n            },\r\n            showPopup: ({ nodes, edges }) => {},\r\n        },\r\n        methods: {\r\n            changeRegimVivoda: (value) => {\r\n                esModel.regimZaprosa = value\r\n                setEsModel(esModel)\r\n                console.log(value)\r\n            },\r\n\r\n            DefZapros: (TmNumber) => {\r\n                esModel.zapros[String(TmNumber)] = '1'\r\n                setEsModel(esModel)\r\n            },\r\n            SetZapros: (TmNumber, value) => {\r\n                esModel.zapros[String(TmNumber)] = value\r\n                setEsModel(esModel)\r\n                console.log(esModel.zapros)\r\n                //RenderModelingMenu()\r\n            },\r\n            ChangeCoeff: (row, pos, value, nymberTM) => {\r\n                let urovenPrav\r\n                urovenPrav = eval(\r\n                    'esModel.pravila_end[' + Number(nymberTM) + ']'\r\n                )\r\n                let leftSide = urovenPrav[row - 1].split('...')[0]\r\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\r\n                rightSide[pos - 1] =\r\n                    '' + rightSide[pos - 1].split('_')[0] + '_' + value\r\n                let peresobran = '' + leftSide + '...'\r\n                let rightPeresobran = ''\r\n                for (let i = 0; i < rightSide.length; i++) {\r\n                    rightPeresobran = rightPeresobran + rightSide[i]\r\n                    if (i + 1 < rightSide.length) {\r\n                        rightPeresobran = '' + rightPeresobran + '-'\r\n                    }\r\n                }\r\n                peresobran = '' + peresobran + '' + rightPeresobran\r\n                urovenPrav[row - 1] = peresobran\r\n                setEsModel(esModel)\r\n                RenderPravila(Number(nymberTM))\r\n            },\r\n            ChangeX: (events) => {\r\n                let zelen = []\r\n                let fiolet = []\r\n                let obr1 = []\r\n                let obrabotka = {}\r\n                let krasn = []\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].color == '#008000') {\r\n                        esModel.graph.nodes[i].y = 0\r\n                        zelen[zelen.length] = i + 1\r\n                        esModel.graph.nodes[i].x = -300 + zelen.length * 80\r\n                    }\r\n                    if (esModel.graph.nodes[i].color == '#DA70D6') {\r\n                        esModel.graph.nodes[i].y = -250\r\n                        fiolet[fiolet.length] = i + 1\r\n                    }\r\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\r\n                        esModel.graph.nodes[i].y = -500\r\n                        krasn[krasn.length] = i + 1\r\n                    }\r\n                }\r\n                obrabotka['input'] = zelen\r\n                obrabotka['output'] = krasn\r\n                let spisok = {}\r\n                urovniObrabotki = {}\r\n                for (let i = 0; i < fiolet.length; i++) {\r\n                    pp = []\r\n                    getLevelTMObrabotki(fiolet[i], zelen)\r\n                }\r\n                let numberKey = 50\r\n                for (var key in urovniObrabotki) {\r\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\r\n                    numberKey++\r\n                    delete urovniObrabotki[key]\r\n                }\r\n                numberKey = 1\r\n                for (var key in urovniObrabotki) {\r\n                    urovniObrabotki[numberKey] = urovniObrabotki[key]\r\n                    numberKey++\r\n                    delete urovniObrabotki[key]\r\n                }\r\n\r\n                for (var key in urovniObrabotki) {\r\n                    for (let i = 0; i < urovniObrabotki[key].length; i++) {\r\n                        for (let y = 0; y < esModel.graph.nodes.length; y++) {\r\n                            if (\r\n                                esModel.graph.nodes[y].id ==\r\n                                urovniObrabotki[key][i]\r\n                            ) {\r\n                                esModel.graph.nodes[y].y = -100 * Number(key)\r\n                                esModel.graph.nodes[y].x = -225 + 80 * (i + 1)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                let outCounter = 0\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (esModel.graph.nodes[i].color == '#FF0000') {\r\n                        esModel.graph.nodes[i].y =\r\n                            Object.keys(urovniObrabotki).length * -100 - 100\r\n                        esModel.graph.nodes[i].x = -150 + 80 * (outCounter + 1)\r\n                        outCounter++\r\n                    }\r\n                }\r\n                outCounter = 0\r\n                urovniObrabotki['input'] = zelen\r\n                urovniObrabotki['output'] = krasn\r\n                console.log(urovniObrabotki)\r\n                esModel.structure = urovniObrabotki\r\n\r\n                setEsModel(esModel)\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(0)\r\n            },\r\n            UpdatePravila: (events) => {\r\n                let toNode\r\n                if (events.target != undefined)\r\n                    toNode = Number(events.target.id) + 1\r\n                else toNode = events\r\n                esModel.pravilaMode = 1\r\n\r\n                let otKokogo = []\r\n                let massivFrom = []\r\n                for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n                    if (\r\n                        esModel.graph.edges[esModel.graph.edges.length - i - 1]\r\n                            .to == Number(toNode)\r\n                    ) {\r\n                        massivFrom.push(\r\n                            esModel.graph.edges[\r\n                                esModel.graph.edges.length - i - 1\r\n                            ].from\r\n                        )\r\n                    }\r\n                }\r\n                for (let i = 0; i < massivFrom.length; i++) {\r\n                    for (let j = 0; j < esModel.TM.length; j++) {\r\n                        if (\r\n                            esModel.TM[esModel.TM.length - j - 1].id ==\r\n                            Number(massivFrom[i] - 1)\r\n                        ) {\r\n                            otKokogo.push(esModel.TM[esModel.TM.length - j - 1])\r\n                        }\r\n                    }\r\n                }\r\n                if (otKokogo <= 0) return\r\n\r\n                let leftArray = []\r\n                for (let i = 0; i < otKokogo.length; i++) {\r\n                    leftArray.push([])\r\n                    for (\r\n                        let j = 0;\r\n                        j < otKokogo[otKokogo.length - 1 - i].termsCount;\r\n                        j++\r\n                    ) {\r\n                        leftArray[i][j] = String(j + 1)\r\n                    }\r\n                }\r\n\r\n                let arr = []\r\n                let cartes = cartesian(leftArray)\r\n                let start2 = false\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    if (!start2) arr.push([])\r\n                    arr[i] = ''\r\n                    for (let j = 0; j < cartes[i].length; j++) {\r\n                        arr[i] += cartes[i][j]\r\n                        if (j + 1 < cartes[i].length) arr[i] += '_'\r\n                        else arr[i] += '...'\r\n                    }\r\n                    start2 = true\r\n                }\r\n                let doKokogo = []\r\n\r\n                for (let i = 0; i < esModel.TM.length; i++) {\r\n                    if (esModel.TM[i].id == Number(toNode - 1)) {\r\n                        doKokogo.push(esModel.TM[i])\r\n                    }\r\n                }\r\n\r\n                let start3 = false\r\n                let rSide = []\r\n\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    if (!start3) leftArray.push([])\r\n                    rSide[i] = ''\r\n                    for (let j = 0; j < doKokogo.length; j++) {\r\n                        rSide[i] += '1_1'\r\n                        if (j + 1 < doKokogo.length) rSide[i] += '-'\r\n                    }\r\n                    start3 = true\r\n                }\r\n                for (let i = 0; i < cartes.length; i++) {\r\n                    arr[i] += rSide[i]\r\n                }\r\n                esModel.pravila_end[String(toNode)] = arr\r\n                setEsModel(esModel)\r\n            },\r\n            changeEsName: (value) => {\r\n                esModel.options.Name = String(value.target.value)\r\n                setEsModel(esModel)\r\n                RenderOptionsMenu()\r\n            },\r\n            changeEsAuthor: (value) => {\r\n                esModel.options.Author = String(value)\r\n                esModel.options.Author = String(value.target.value)\r\n                setEsModel(esModel)\r\n                RenderOptionsMenu()\r\n            },\r\n            ChangePravila: (row, pos, value, urovenObrabotki) => {\r\n                let urovenPrav\r\n                urovenPrav = esModel.pravila_end[urovenObrabotki]\r\n                let leftSide = urovenPrav[row - 1].split('...')[0]\r\n                let rightSide = urovenPrav[row - 1].split('...')[1].split('-')\r\n                rightSide[pos - 1] =\r\n                    '' + value + '_' + rightSide[pos - 1].split('_')[1]\r\n\r\n                let peresobran = '' + leftSide + '...'\r\n                let rightPeresobran = ''\r\n                for (let i = 0; i < rightSide.length; i++) {\r\n                    rightPeresobran = rightPeresobran + rightSide[i]\r\n                    if (i + 1 < rightSide.length) {\r\n                        rightPeresobran = '' + rightPeresobran + '-'\r\n                    }\r\n                }\r\n                peresobran = '' + peresobran + '' + rightPeresobran\r\n                urovenPrav[row - 1] = peresobran\r\n                setEsModel(esModel)\r\n            },\r\n            ChangePlotColor: (TmNumber, TermNumber, color) => {\r\n                esModel.TM[TmNumber].plotsColors[TermNumber] = color\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            deletePointplot: (TmNumber, TermNumber) => {\r\n                let deleteNumber =\r\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\r\n                        .length / 2\r\n                delete esModel.TM[TmNumber].coords[TermNumber][\r\n                    'x' + deleteNumber\r\n                ]\r\n                delete esModel.TM[TmNumber].coords[TermNumber][\r\n                    'y' + deleteNumber\r\n                ]\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            addNewPointPlot: (TmNumber, TermNumber) => {\r\n                let newPointNumber =\r\n                    Object.keys(esModel.TM[TmNumber].coords[TermNumber])\r\n                        .length /\r\n                        2 +\r\n                    1\r\n                let newCoordsNameX = 'x' + newPointNumber\r\n                let newCoordsNameY = 'y' + newPointNumber\r\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameX] = 0\r\n                esModel.TM[TmNumber].coords[TermNumber][newCoordsNameY] = 0\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            changeCoordsValue: (TmNumber, TermNumber, key, value) => {\r\n                esModel.TM[TmNumber].coords[TermNumber][key] = Number(value)\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            deleteTerm: (TmNumber) => {\r\n                if (esModel.TM[TmNumber].termsCount == 1) return\r\n\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n                esModel.TM[TmNumber].termsCount =\r\n                    esModel.TM[TmNumber].termsCount - 1\r\n                //\r\n                let newTermName =\r\n                    'term' + Object.keys(esModel.TM[TmNumber].termsNames).length\r\n                delete esModel.TM[TmNumber].termsNames[newTermName]\r\n                esModel.TM[TmNumber].coords.splice(\r\n                    esModel.TM[TmNumber].coords.length - 1,\r\n                    1\r\n                )\r\n                esModel.TM[TmNumber].plotsColors.pop()\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n\r\n                setEsModel(esModel)\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            addNewTerm: (TmNumber) => {\r\n                let willUpdate = false\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        esModel.graph.nodes[i].color == '#F5DEB3'\r\n                    ) {\r\n                        willUpdate = true\r\n                    }\r\n\r\n                    if (\r\n                        esModel.graph.nodes[i].id == Number(TmNumber) + 1 &&\r\n                        (esModel.graph.nodes[i].color == '#008000' ||\r\n                            esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                            esModel.graph.nodes[i].color == '#FF0000')\r\n                    ) {\r\n                        esModel.pravila_end = []\r\n                    }\r\n                }\r\n                esModel.TM[TmNumber].termsCount =\r\n                    esModel.TM[TmNumber].termsCount + 1\r\n                let newTermName =\r\n                    'term' +\r\n                    (Object.keys(esModel.TM[TmNumber].termsNames).length + 1)\r\n                esModel.TM[TmNumber].termsNames[newTermName] = 'new_term'\r\n                let t = {\r\n                    x1: 0,\r\n                    y1: 0,\r\n                    x2: 0,\r\n                    y2: 0,\r\n                    x3: 0,\r\n                    y3: 0,\r\n                    x4: 0,\r\n                    y4: 0,\r\n                }\r\n                esModel.TM[TmNumber].coords.push(t)\r\n                esModel.TM[TmNumber].plotsColors.push('#000000')\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n\r\n                for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n                    if (\r\n                        (String(esModel.graph.nodes[i].color) == '#FF0000' ||\r\n                            String(esModel.graph.nodes[i].color) ==\r\n                                '#DA70D6') &&\r\n                        !willUpdate\r\n                    ) {\r\n                        esModel.methods.UpdatePravila(esModel.graph.nodes[i].id)\r\n                    }\r\n                }\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n            changeTermName: (TmNumber, TermNumber, newName) => {\r\n                esModel.TM[TmNumber].termsNames['term' + TermNumber] = newName\r\n                setEsModel(esModel)\r\n                let popup = ''\r\n                for (let i = 0; i < esModel.TM[TmNumber].termsCount; i++) {\r\n                    popup +=\r\n                        '' +\r\n                        esModel.TM[TmNumber].termsNames[\r\n                            'term' + String(i + 1)\r\n                        ] +\r\n                        '\\n'\r\n                }\r\n                esModel.graph.nodes[TmNumber].title = popup\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n                RenderSelectedTM(Number(TmNumber))\r\n            },\r\n\r\n            AddTMInputLevel: (id) => {\r\n                esModel.TM.push({\r\n                    id: id,\r\n                    name: '',\r\n                    termsCount: 2,\r\n                    termsNames: { term1: '', term2: '' },\r\n                    coords: [\r\n                        {\r\n                            x1: 0,\r\n                            y1: 0,\r\n                            x2: 0,\r\n                            y2: 1,\r\n                            x3: 1,\r\n                            y3: 1,\r\n                            x4: 1,\r\n                            y4: 0,\r\n                        },\r\n                        {\r\n                            x1: 1,\r\n                            y1: 0,\r\n                            x2: 1,\r\n                            y2: 1,\r\n                            x3: 2,\r\n                            y3: 1,\r\n                            x4: 2,\r\n                            y4: 0,\r\n                        },\r\n                    ],\r\n                    plotsColors: ['#000000', '#000000'],\r\n                })\r\n                setEsModel(esModel)\r\n            },\r\n            ChangeSelectedTMName: (id, name) => {\r\n                esModel.TM[id].name = String(name)\r\n\r\n\r\n                let modifiedStr = name.replace(/ /g, \"\\n\")\r\n                \r\n                \r\n               let splitString = \"\";\r\n                for (let i = 0; i < name.length; i += 15) {\r\n                  splitString += name.substr(i, 15) + \"\\n\";\r\n                }\r\n                esModel.graph.nodes[id].label = modifiedStr\r\n                setEsModel(esModel)\r\n                RenderSelectedTM(Number(id))\r\n                networks.network.setData({\r\n                    nodes: esModel.graph.nodes,\r\n                    edges: esModel.graph.edges,\r\n                })\r\n            },\r\n        },\r\n    })\r\n    const [indexBodyHtml2, setindexBodyHtml2] = useState([\r\n        ['НАСТРОЙКИ'],\r\n        [\r\n            <div>\r\n                НАЗВАНИЕ ЭС:{' '}\r\n                <input\r\n                    class=\"EsNameInput\"\r\n                    value={esModel.options.Name}\r\n                    onInput={esModel.methods.changeEsName}\r\n                />\r\n                АВТОР ЭС:{' '}\r\n                <input\r\n                    class=\"EsAuthorInput\"\r\n                    value={esModel.options.Author}\r\n                    onInput={esModel.methods.changeEsAuthor}\r\n                />\r\n            </div>,\r\n        ],\r\n    ])\r\n\r\n    const { graph, events } = esModel\r\n    const [networks, setNetwork] = useState({ network: {} })\r\n    let states = { network: {} }\r\n\r\n    let uroven = 0\r\n    let zz\r\n    let pp = []\r\n    let start\r\n    let urovniObrabotki = {}\r\n    function getLevelTMObrabotki(obj, zelen) {\r\n        if (zz == undefined) {\r\n            zz = zelen\r\n            start = obj\r\n        }\r\n\r\n        for (let i = 0; i < esModel.graph.edges.length; i++) {\r\n            if (start == obj) uroven = 0\r\n            if (esModel.graph.edges[i].to == obj) {\r\n                uroven = uroven + 1\r\n                if (zz.includes(esModel.graph.edges[i].from)) {\r\n                    pp[pp.length] = uroven\r\n                    uroven = uroven - 1\r\n                } else getLevelTMObrabotki(esModel.graph.edges[i].from)\r\n            }\r\n        }\r\n        if (start == obj) {\r\n            console.log(pp)\r\n            if (urovniObrabotki[Math.max(...pp)] == undefined) {\r\n                urovniObrabotki[Math.max(...pp)] = []\r\n                urovniObrabotki[Math.max(...pp)][\r\n                    urovniObrabotki[Math.max(...pp)].length\r\n                ] = obj\r\n                start = undefined\r\n                zz = undefined\r\n            } else {\r\n                urovniObrabotki[Math.max(...pp)][\r\n                    urovniObrabotki[Math.max(...pp)].length\r\n                ] = obj\r\n                start = undefined\r\n                zz = undefined\r\n            }\r\n        }\r\n    }\r\n\r\n    function changePravila(row, pos, value, coeff) {\r\n        esModel.methods.ChangePravila(row, pos, value, coeff)\r\n    }\r\n    function changeCoeff(row, pos, coeff, urObr) {\r\n        esModel.methods.ChangeCoeff(row, pos, coeff, urObr)\r\n    }\r\n\r\n    function cartesian(arg) {\r\n        var r = [],\r\n            args = arg\r\n        args.reduceRight(function (cont, factor, i) {\r\n            return function (arr) {\r\n                for (var j = 0, l = factor.length; j < l; j++) {\r\n                    var a = arr.slice() // clone arr\r\n                    a[i] = factor[j]\r\n                    cont(a)\r\n                }\r\n            }\r\n        }, Array.prototype.push.bind(r))(new Array(args.length))\r\n        let t = r.length\r\n        return r\r\n    }\r\n\r\n    function SendXmlModelling() {\r\n        let tempXML = {}\r\n        if (esModel.TM.length == 1) {\r\n            tempXML['TM'] = []\r\n            tempXML['TM'].push(esModel.TM)\r\n        } else tempXML['TM'] = esModel.TM\r\n        let pravilaDict = {}\r\n        let pravilaDict1 = {}\r\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\r\n            let st = '' + t\r\n            pravilaDict[st] = esModel.pravila_end[t]\r\n        }\r\n        pravilaDict1 = pravilaDict\r\n        for (var key in pravilaDict) {\r\n            if (pravilaDict[key] == '') {\r\n                pravilaDict[key] = ''\r\n            }\r\n            pravilaDict['n' + key] = pravilaDict[key]\r\n            delete pravilaDict[key]\r\n        }\r\n        tempXML['pravila_end'] = pravilaDict1\r\n        tempXML['pravila_temp'] = pravilaDict\r\n        tempXML['graph'] = esModel.graph\r\n        tempXML['counter'] = esModel.counter\r\n        tempXML['options'] = esModel.options\r\n\r\n        let tempStructure = {} // esModel.structure\r\n        for (var key in esModel.structure) {\r\n            tempStructure['n_' + key] = esModel.structure[key]\r\n        }\r\n        tempXML['structure'] = tempStructure\r\n\r\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\r\n        const zapros = esModel.zapros // {'1':'1.35','2':'1','3':'1'}\r\n        setxmlModeling(file)\r\n        const data = new FormData()\r\n        data.append('zapros', JSON.stringify(zapros))\r\n        data.append('file', file)\r\n        axios\r\n            .post('https://aesfu.ru/api/study/flm-builder', data, {\r\n                //https://aesfu.ru/api/study/flm-builder\r\n            })\r\n            .then((res) => {\r\n                if (esModel.regimZaprosa == 1) {\r\n                    var temp = res.data\r\n                    var str = ''\r\n                    temp.map((p) => {\r\n                        str += '[' + p[0] + ',' + p[1] + '] \\n'\r\n                    })\r\n                    // RenderModelingMenu(\"[\" + res.data[0] + \",\"+res.data[1]+\"]\")\r\n                    RenderModelingMenu(str)\r\n                }\r\n                if (esModel.regimZaprosa == 2) {\r\n                    console.log(esModel.structure.output)\r\n                    console.log(esModel.TM[esModel.structure.output[0] - 1])\r\n                    var temp = res.data\r\n                    var str = ''\r\n                    temp.map((item, index) => {\r\n                        str +=\r\n                            esModel.TM[esModel.structure.output[index] - 1]\r\n                                .termsNames['term' + item[0]] +\r\n                            ' с вероятностью ' +\r\n                            item[1] +\r\n                            '  '\r\n                    })\r\n                    RenderModelingMenu(str)\r\n                }\r\n            })\r\n    }\r\n\r\n    function SaveToXMLOnComputer() {\r\n        let tempXML = {}\r\n        if (esModel.TM.length == 1) {\r\n            tempXML['TM'] = []\r\n            tempXML['TM'].push(esModel.TM)\r\n        } else tempXML['TM'] = esModel.TM\r\n\r\n        console.log(esModel.pravila_end)\r\n        let pravilaDict = {}\r\n        let pravilaDict1 = {}\r\n        for (let t = 0; t < esModel.pravila_end.length; t++) {\r\n            let st = '' + t\r\n            pravilaDict[st] = esModel.pravila_end[t]\r\n        }\r\n        pravilaDict1 = pravilaDict\r\n        for (var key in pravilaDict) {\r\n            if (pravilaDict[key] == '') {\r\n                pravilaDict[key] = ''\r\n            }\r\n            pravilaDict['n' + key] = pravilaDict[key]\r\n            delete pravilaDict[key]\r\n        }\r\n        console.log(pravilaDict)\r\n        tempXML['pravila_end'] = pravilaDict1\r\n        tempXML['pravila_temp'] = pravilaDict\r\n        tempXML['graph'] = esModel.graph\r\n        tempXML['counter'] = esModel.counter\r\n        tempXML['options'] = esModel.options\r\n\r\n        let tempStructure = {} // esModel.structure\r\n        for (var key in esModel.structure) {\r\n            tempStructure['n_' + key] = esModel.structure[key]\r\n        }\r\n        tempXML['structure'] = tempStructure\r\n\r\n        const element = document.createElement('a')\r\n        document.body.appendChild(element)\r\n\r\n        const file = new Blob([o2x(tempXML)], { type: 'text/xml' })\r\n        element.href = URL.createObjectURL(file)\r\n        element.download = 'myFile654.xml'\r\n        element.click()\r\n    }\r\n    function Pravila(arg) {\r\n        let uroven = 0\r\n        let urovniPravil = []\r\n        let okolo = []\r\n        okolo.push(\r\n            <div class=\"LayerElement\">\r\n                {Table(esModel, 2, changePravila, changeCoeff, arg)}\r\n            </div>\r\n        )\r\n\r\n        setindexBodyHtml2(okolo)\r\n    }\r\n    function ConsoleXml(xmlStr) {\r\n        console.log(xmlStr)\r\n        const a = document.createElement('a')\r\n        document.body.appendChild(a)\r\n        a.download = 'FLMmodel.xml'\r\n        const file = new File([xmlStr], 'FLMmodel.xml', { type: 'text/xml' })\r\n        sendToServer(file)\r\n    }\r\n    function XmlOnServer() {\r\n        //let f = new File(\"./temp.xml\")\r\n        const iconv = require('iconv-lite')\r\n        const encodedData = iconv.decode(Buffer.from(xmlFiles), 'utf-8') //windows-1251 //Buffer.from(response.data)\r\n        const parser = new XMLParser()\r\n        let jObj = parser.parse(encodedData)\r\n        console.log(jObj)\r\n        /*\r\n\r\nconst axios = require('axios').default;\r\naxios.get(\"/xmlS/filedddd.xml\", {\r\n    responseType: 'arraybuffer',\r\n    responseEncoding: 'binary'\r\n\r\n}).then((response) => {\r\n\r\n\r\n})\r\n.catch((response) => {\r\n  console.log('FAILURE!!'+response);\r\n}); */\r\n    }\r\n\r\n    const changeTermName = (event) => {\r\n        input_Name = event.target.value\r\n\r\n        if (\r\n            event.target.name.split('_')[0].match(/[a-zA-Z]+/g)[0] ==\r\n            'termInput'\r\n        ) {\r\n            esModel.methods.changeTermName(\r\n                event.target.name.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.name.split('_')[1],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n\r\n    const ChangeColor = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.ChangePlotColor(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1,\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n    const DeletePointPlot = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.deletePointplot(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1\r\n            )\r\n        }\r\n    }\r\n    const changeCoordsValues = (event) => {\r\n        input_Name = event.target.name\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.changeCoordsValue(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1,\r\n                event.target.name.split('_')[0],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n    const addNewPointPlot = (event) => {\r\n        if (\r\n            event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'termInput'\r\n        ) {\r\n            esModel.methods.addNewPointPlot(\r\n                event.target.id.split('_')[0].match(/\\d+/g)[0],\r\n                event.target.id.split('_')[1] - 1\r\n            )\r\n        }\r\n    }\r\n\r\n    const AddNewTerm = (event) => {\r\n        esModel.methods.addNewTerm(event.target.id)\r\n    }\r\n    const DeleteTerm = (event) => {\r\n        esModel.methods.deleteTerm(event.target.id)\r\n    }\r\n\r\n    const RenderOptionsMenu = (selectedIndex) => {\r\n        let indexB = []\r\n        indexB = ['OPTIONS']\r\n        indexB.push(\r\n            <div>\r\n                NAME ES:\r\n                <input\r\n                    class=\"EsNameInput\"\r\n                    value={esModel.options.Name}\r\n                    onInput={esModel.methods.changeEsName}\r\n                />\r\n                AUTHOR ES:\r\n                <input\r\n                    class=\"EsAuthorInput\"\r\n                    value={esModel.options.Author}\r\n                    onInput={esModel.methods.changeEsAuthor}\r\n                />\r\n            </div>\r\n        )\r\n        setindexBodyHtml2(indexB)\r\n\r\n        //\r\n    }\r\n    const ChangeZapros = (selectedIndex) => {\r\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\r\n\r\n        esModel.methods.SetZapros(\r\n            selectedIndex.target.id,\r\n            String(selectedIndex.target.selectedIndex + 1)\r\n        )\r\n    }\r\n\r\n    //режим вывода в окне моделирования\r\n    const ChangeRegimZaprosa = (selectedIndex) => {\r\n        // console.log(selectedIndex.target.id + \" value = \"+String(selectedIndex.target.selectedIndex+1))\r\n        console.log(selectedIndex.target.value)\r\n        esModel.methods.changeRegimVivoda(selectedIndex.target.value)\r\n\r\n        //esModel.methods.SetZapros(selectedIndex.target.id, String(selectedIndex.target.selectedIndex+1))\r\n    }\r\n\r\n    const ChangeZaprosInput = (selectedIndex) => {\r\n        //console.log(selectedIndex.target.name+\"   \"+String(selectedIndex.target.value))\r\n\r\n        esModel.methods.SetZapros(\r\n            selectedIndex.target.name,\r\n            String(selectedIndex.target.value)\r\n        )\r\n    }\r\n\r\n    const RenderModelingMenu = (data) => {\r\n        let indexB = []\r\n        indexB = ['МОДЕЛИРОВАНИЕ']\r\n        console.log(esModel.structure)\r\n        //onChange={}  console.log(esModel.TM[x].name)\r\n        indexB.push(\r\n            <div>\r\n                <select onChange={ChangeRegimZaprosa}>\r\n                    <option value=\"1\">Значение</option>\r\n                    <option value=\"2\">Значение+Расшифровка</option>\r\n                </select>\r\n            </div>\r\n        )\r\n\r\n        for (let i = 0; i < esModel.structure['input'].length; i++) {\r\n            let nameTM = ''\r\n            let number = 0\r\n\r\n            for (let x = 0; x < esModel.TM.length; x++) {\r\n                if (\r\n                    esModel.TM[x].id ==\r\n                    String(esModel.structure['input'][i] - 1)\r\n                ) {\r\n                    nameTM += esModel.TM[x].name\r\n                    number = x\r\n                }\r\n            }\r\n\r\n            if (esModel.zapros[esModel.structure['input'][i]] == undefined)\r\n                esModel.methods.DefZapros(esModel.structure['input'][i])\r\n            //решаем вывести  выпадающий список или поле ввода\r\n            if (Object.keys(esModel.TM[number].coords[0]).length == 2) {\r\n                indexB.push(\r\n                    <div>\r\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\r\n                        {nameTM}):\r\n                        <select\r\n                            className=\"custom-select\"\r\n                            id={esModel.structure['input'][i]}\r\n                            onChange={ChangeZapros}\r\n                            defaultValue={\r\n                                esModel.TM[esModel.structure['input'][i] - 1]\r\n                                    .termsNames[\r\n                                    'term' +\r\n                                        esModel.zapros[\r\n                                            esModel.structure['input'][i]\r\n                                        ]\r\n                                ]\r\n                            }\r\n                        >\r\n                            {Object.values(esModel.TM[number].termsNames).map(\r\n                                (option, index) => (\r\n                                    <option\r\n                                        key={index}\r\n                                        id={option}\r\n                                        value={option}\r\n                                    >\r\n                                        {option}\r\n                                    </option>\r\n                                )\r\n                            )}\r\n                        </select>\r\n                    </div>\r\n                )\r\n            } else {\r\n                indexB.push(\r\n                    <div>\r\n                        ТЕРМ - МНОЖЕСТВО ( {esModel.structure['input'][i]} ) (\r\n                        {nameTM}):\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"...\"\r\n                            name={esModel.structure['input'][i]}\r\n                            onChange={ChangeZaprosInput}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n\r\n        indexB.push(\r\n            <div>\r\n                <button onClick={SendXmlModelling}> МОДЕЛИРОВАТЬ</button>\r\n            </div>\r\n        )\r\n\r\n        console.log(data)\r\n        if (typeof data == 'string') indexB.push(<div>{data} </div>)\r\n        setindexBodyHtml2(indexB)\r\n    }\r\n\r\n    const changeSelectedTMName = (event) => {\r\n        input_Name = event.target.id\r\n        if (event.target.id.split('_')[0].match(/[a-zA-Z]+/g)[0] == 'term') {\r\n            esModel.methods.ChangeSelectedTMName(\r\n                event.target.id.split('_')[1],\r\n                event.target.value\r\n            )\r\n        }\r\n    }\r\n\r\n    const RenderSelectedTM = (selectedIndex) => {\r\n        //console.log(esModel)\r\n        let tm\r\n\r\n        tm = selectedIndex\r\n        let arrayTerms = []\r\n        let temp = []\r\n        let points4Plots = []\r\n        let points\r\n        inputLevelCounter = 0\r\n        let pravilaButton = []\r\n\r\n        for (let i = 0; i < esModel.graph.nodes.length; i++) {\r\n            if (\r\n                esModel.graph.nodes[i].id == selectedIndex + 1 &&\r\n                (esModel.graph.nodes[i].color == '#DA70D6' ||\r\n                    esModel.graph.nodes[i].color == '#FF0000')\r\n            ) {\r\n                pravilaButton = [\r\n                    <button id={tm} onClick={RenderPravila}>\r\n                        {' '}\r\n                        ПРАВИЛА:{' '}\r\n                    </button>,\r\n                ]\r\n            }\r\n        }\r\n        for (let i = 0; i < esModel.TM.length; i++) {\r\n            if (esModel.TM[i].id == tm) {\r\n                tm = i\r\n            }\r\n        }\r\n\r\n        let nm = 'term_' + tm\r\n        temp.push(\r\n            <div>\r\n                <div>\r\n                    {' '}\r\n                    <label class=\"myLabel\"> ТЕРМ - МНОЖЕСТВО №{tm + 1} </label>\r\n                </div>\r\n                <label class=\"myLabel\">НАЗВАНИЕ ТМ: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={esModel.TM[tm].name}\r\n                    className=\"form-control\"\r\n                    id={nm}\r\n                    placeholder=\"...\"\r\n                    onChange={changeSelectedTMName}\r\n                />\r\n                <div></div>\r\n                <label class=\"myLabel\"> ТЕРМОВ В ТМ:  </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={esModel.TM[tm].termsCount}\r\n                    className=\"form-control\"\r\n                    placeholder=\"...\"\r\n                />\r\n                <button id={tm} onClick={AddNewTerm}>\r\n                    {' '}\r\n                    ДОБАВИТЬ ТЕРМ\r\n                </button>\r\n                <button id={tm} onClick={DeleteTerm}>\r\n                    {' '}\r\n                    УДАЛИТЬ ТЕРМ\r\n                </button>\r\n                {pravilaButton}\r\n                <div></div>\r\n            </div>\r\n        )\r\n        let TMindex = 0\r\n        for (let i = 0; i < esModel.TM[tm].coords.length; i++) {\r\n            let j = i + 1\r\n            let stringLabel = 'ТЕРМ №' + j\r\n            let stringNameTerm = 'termInput' + tm + '_' + j\r\n            points4Plots = []\r\n\r\n            for (\r\n                let j = 0;\r\n                j < Object.keys(esModel.TM[tm].coords[i]).length / 2;\r\n                j++\r\n            ) {\r\n                let xName = 'x' + (j + 1) + '_input'\r\n                let yName = 'y' + (j + 1) + '_input'\r\n\r\n                points4Plots.push(\r\n                    <div>\r\n                        x{j + 1}:{' '}\r\n                        <input\r\n                            class=\"plotInput\"\r\n                            type=\"number\"\r\n                            step=\"0.1\"\r\n                            min=\"-1000\"\r\n                            value={esModel.TM[tm].coords[i]['x' + (j + 1)]}\r\n                            id={stringNameTerm}\r\n                            name={xName}\r\n                            onInput={changeCoordsValues}\r\n                        />\r\n                        y{j + 1}:{' '}\r\n                        <input\r\n                            class=\"plotInput\"\r\n                            type=\"number\"\r\n                            step=\"0.1\"\r\n                            min=\"0\"\r\n                            value={esModel.TM[tm].coords[i]['y' + (j + 1)]}\r\n                            id={stringNameTerm}\r\n                            name={yName}\r\n                            onInput={changeCoordsValues}\r\n                        />\r\n                    </div>\r\n                )\r\n            }\r\n            temp.push(\r\n                <div class=\"blockMy\">\r\n                    <div class=\"blockMy\">\r\n                        <div> {stringLabel} </div>\r\n                        <div>\r\n                            <input\r\n                                name={stringNameTerm}\r\n                                value={\r\n                                    esModel.TM[tm].termsNames['term' + (i + 1)]\r\n                                }\r\n                                type=\"text\"\r\n                                onInput={changeTermName}\r\n                            />{' '}\r\n                        </div>\r\n\r\n                        <div class=\"blockMy\">\r\n                            <button\r\n                                onClick={addNewPointPlot}\r\n                                id={stringNameTerm}\r\n                            >\r\n                                +\r\n                            </button>\r\n                            <button\r\n                                onClick={DeletePointPlot}\r\n                                id={stringNameTerm}\r\n                            >\r\n                                -\r\n                            </button>\r\n                            <input\r\n                                type=\"color\"\r\n                                class=\"odin\"\r\n                                id={stringNameTerm}\r\n                                onChange={ChangeColor}\r\n                                value={esModel.TM[tm].plotsColors[i]}\r\n                            />\r\n                        </div>\r\n                        {points4Plots}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        temp.push(\r\n            <div class=\"Plot\">\r\n                <div></div>\r\n                <div>\r\n                    {App(\r\n                        esModel.TM[tm].coords,\r\n                        esModel.TM[tm].termsCount,\r\n                        esModel.TM[tm].plotsColors\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n        let okolo = []\r\n        okolo.push(<div class=\"Blochek\">{temp}</div>)\r\n        setindexBodyHtml2(okolo)\r\n        inputLevelCounter++\r\n        /* <div class = \"Razrez\" >. </div>*/\r\n    }\r\n\r\n    function GoToPravila(index) {\r\n        esModel.pravilaMode = index\r\n    }\r\n\r\n    const RenderPravila = (events) => {\r\n        GoToPravila(1)\r\n        setEsModel(esModel)\r\n\r\n        let uroven\r\n        if (events.target == undefined) uroven = events\r\n        else uroven = Number(events.target.id) + 1\r\n\r\n        console.log(uroven)\r\n        Pravila(uroven)\r\n    }\r\n    function sendToServer(file) {\r\n        const data = new FormData()\r\n        data.append('file', file)\r\n        axios\r\n            .post('http://localhost:8000/upload', data, {\r\n                // receive two    parameter endpoint url ,form data\r\n            })\r\n            .then((res) => {\r\n                // then print response status\r\n                XmlOnServer()\r\n                setXmlName('' + xmlFiles.name)\r\n            })\r\n    }\r\n\r\n    function testINFO() {\r\n        const index = esModel.graph.nodes.findIndex(\r\n            (obj) => obj.color === '#FF0000'\r\n        )\r\n        console.log(index) // 1\r\n\r\n        ///esModel.graph.nodes.map((node) => {if (node.color == \"#FF0000\") console.log ()   })\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const iconv = require('iconv-lite')\r\n        const fileToArrayBuffer = require('file-to-array-buffer')\r\n        const reader = new FileReader()\r\n        var encodedData = ''\r\n\r\n        const parser = new XMLParser()\r\n        reader.readAsText(xmlFiles)\r\n        reader.onload = (_event) => {\r\n            const content = _event.target.result\r\n            let jObj = parser.parse(content)\r\n\r\n            console.log(jObj)\r\n            if (jObj.TM.length == undefined) {\r\n                esModel.TM = []\r\n                esModel.TM[0] = jObj.TM\r\n            } else esModel.TM = jObj.TM\r\n\r\n            esModel.graph = jObj.graph\r\n            esModel.counter = jObj.counter\r\n            esModel.options = jObj.options\r\n            let tempStructure = {}\r\n            for (let i = 0; i < Object.keys(jObj.structure).length; i++) {\r\n                tempStructure[Object.keys(jObj.structure)[i].split('_')[1]] =\r\n                    jObj.structure[Object.keys(jObj.structure)[i]]\r\n            }\r\n\r\n            esModel.structure = tempStructure\r\n            esModel.pravila_end = [] //jObj.pravila_end\r\n            for (let i = 0; i < Object.keys(jObj.pravila_temp).length; i++) {\r\n                esModel.pravila_end[i] = jObj.pravila_temp['n' + i]\r\n            }\r\n            setEsModel(esModel)\r\n            RenderOptionsMenu()\r\n            // Do the parsing with content\r\n        }\r\n    }\r\n    const handleFileSelect = (event) => {\r\n        setXmlFiles(event.target.files[0])\r\n    }\r\n    let inp_termMn_1 = 8\r\n    /*\r\n<button  onClick={ConsoleXml}> XML</button>\r\n    <button  onClick={SaveModelToXML}> TO XML</button>\r\n    <input type=\"file\" id=\"myFile\" onChange={(e)=>UploadXML(e)} />\r\n*/\r\n    return (\r\n        <div  >\r\n             <div >\r\n            <button onClick={SaveToXMLOnComputer}>\r\n                SAVE MODEL TO COMPUTER\r\n            </button>\r\n            <button onClick={esModel.methods.ChangeX}>SORT</button>\r\n            <button onClick={RenderOptionsMenu}>OPTIONS</button>\r\n            <button onClick={RenderModelingMenu}> MODELING</button>\r\n            <input type=\"file\" onChange={handleFileSelect} />\r\n            <button type=\"button\" onClick={handleSubmit}>\r\n                Загрузить\r\n            </button>\r\n            <button type=\"button\" style={{ marginLeft: '4px' }}>\r\n                <a target=\"_blank\" href=\"https://aesfu.ru/method/flm-builder/instructions\">Документация</a>\r\n            </button>\r\n            </div>\r\n            <div class=\"LayerElement\"> {indexBodyHtml2}</div>\r\n            <div class=\"LayerElement\">              \r\n                <Graph\r\n                    id=\"graph\"\r\n                    getNetwork={(network) => {\r\n                        networks.network = network\r\n                        setNetwork(networks)\r\n                    }}\r\n                    graph={esModel.graph}\r\n                    options={options}\r\n                    events={esModel.events}\r\n                    style={{\r\n                        width: '700px',\r\n                        height: '600px',\r\n                        position: 'flex',\r\n                        right: '0',\r\n                        border: '1px solid',\r\n                    }}\r\n                />\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nReactDOM.render(<FlmTree />, document.getElementById('root'))\r\n"],"sourceRoot":""}